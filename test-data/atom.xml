<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WANcatServer</title>
  
  <subtitle>網貓伺服器</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wancat.cc/"/>
  <updated>2019-01-20T05:23:25.070Z</updated>
  <id>https://www.wancat.cc/</id>
  
  <author>
    <name>lancatlin 林宏信</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>網站建置紀錄</title>
    <link href="https://www.wancat.cc/2019/01/20/my-website-building-log/"/>
    <id>https://www.wancat.cc/2019/01/20/my-website-building-log/</id>
    <published>2019-01-20T05:15:09.000Z</published>
    <updated>2019-01-20T05:23:25.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="網站建置紀錄"><a href="#網站建置紀錄" class="headerlink" title="網站建置紀錄"></a>網站建置紀錄</h1><p>我的網站從 2017 年六月第一次上 GitHub Page，到現在 <a href="http://www.wancat.cc">www.wancat.cc</a> ，也已經半年了，寫下這篇文章紀錄一下架站的方法。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>我的部落格是用 <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 將 Markdown 轉成一個靜態網站的，所以可以部屬到 GitHub Page 或是任何伺服器，我自己現在還留著 <a href="https://wancatserver.github.io" target="_blank" rel="noopener">https://wancatserver.github.io</a> 避免哪天伺服器發生不測……。那 Hexo 可以多重部屬，我的設定檔大概長這樣。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:WANcatServer/WANcatServer.github.io.git</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">rsync</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">我的伺服器</span> <span class="string">ip</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">lancat</span></span><br><span class="line"><span class="attr">  root:</span> <span class="string">/volume2/WANcatServer/www</span></span><br></pre></td></tr></table></figure><p>那我的佈景是使用 <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">Archer</a>，非常好看的一個佈景，那我有做一些小調整：把簡體中文換成繁體，然後將授權地方放上 CC 授權。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd path/to/blog</span><br><span class="line">vim /theme/archer/layout/post.ejs</span><br></pre></td></tr></table></figure><p>即可修改模板內容，<a href="https://ejs.co" target="_blank" rel="noopener">EJS</a> 也是我之前用過的模板引擎，所以挺快就弄好了。</p><p>到 <a href="https://creativecommons.org/" target="_blank" rel="noopener">創用 CC 官網</a> 上找你要的授權，就可以複製 HTML 嵌入到網站裡了。可以直接加在 Archer 裡面的 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme/archer/_config.yml</span></span><br><span class="line"><span class="comment"># 將 license 改成以下</span></span><br><span class="line"><span class="attr">license:</span> <span class="string">&lt;a</span> <span class="string">rel="license"</span> <span class="string">href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;&lt;img</span> <span class="string">alt="創用</span> <span class="string">CC</span> <span class="string">授權條款"</span> <span class="string">style="border-width:0"</span> <span class="string">src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png"</span> <span class="string">/&gt;&lt;/a&gt;&lt;br</span> <span class="string">/&gt;本著作係採用&lt;a</span> <span class="string">rel="license"</span> <span class="string">href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;創用</span> <span class="string">CC</span> <span class="string">姓名標示-相同方式分享</span> <span class="number">4.0</span> <span class="string">國際</span> <span class="string">授權條款&lt;/a&gt;授權.</span></span><br></pre></td></tr></table></figure><p>RSS feed 須安裝 <code>hexo-generator-feed</code> 包，然後在 Archer 裡配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme/archer/_config.yml</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><p>Disqus 也很簡單，只要將 Disqus ID 丟到網站的 _config （不是佈景的）裡就好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">//你的</span> <span class="string">ID</span></span><br></pre></td></tr></table></figure><p>可以裝 Google Analytics 看流量，設定 Archer _config：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme/archer/_config.yml</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">//你的</span> <span class="string">ID</span></span><br></pre></td></tr></table></figure><p>一開始流量不會進去的那麼快，我是隔天才看到流量進去的，所以不用緊張（也可能是我當初時間沒設到當天）。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>用 Hexo 的好處就是可以版控，所有文章都是好讀的 Markdown，我有做 Git 版控並同步到我自己架的 <a href="https://gitea.io/zh-tw/" target="_blank" rel="noopener">Gitea</a> 上（沒有公開）。比較麻煩的是佈景，佈景裝的時候是用 <code>git clone</code> 下來，所以在 Git 裡頭就會變成 <strong>子模組 Submodules</strong> ，那因為佈景基本上不用更新，而且我不太會用子模組，所以不如整個一起做版控（會把自己微調的內容紀錄進去），所以就把 Archer 底下的 .git 刪掉，整個 add 進去就好。Archer 的更新比較麻煩些，要自己把有更動過的檔案抓出來，然後下載新版本再移進去，所以我只更新過一次。</p><p>接下來有空也有打算自己寫一個佈景，不過現在我的前端很廢，慢慢來。</p><h2 id="硬體"><a href="#硬體" class="headerlink" title="硬體"></a>硬體</h2><p>由於現在幫<a href="https://taiwan1forestrestoration.blogspot.com/" target="_blank" rel="noopener">山林復育協會</a>管理主機，所以我有一台 <a href="https://www.synology.com/zh-tw/products/DS918+" target="_blank" rel="noopener">Synology DS918+</a> 可以用。這台主機有還夠用的硬體，主打軟體，不過是面向非技術使用者，有自己的軟體商店，但內容有點缺乏，而且不能使用 apt（雖然它是 debian 系的），ssh 不能用公鑰登入（我有去設定過了！），shell 超難打，網頁界面很卡又容易跑掉，如果你有技術背景，不是特別在乎它附的軟體，還是自己裝 Ubuntu Server 輕鬆些。</p><p>但它的檔案系統的確蠻方便的，也有出手機應用程式，所以可以像 Google Drive 一樣從手機讀檔案，Web 管理界面也是讓我不需要一個一個查指令，有著還算清楚的說明。只不過用到現在還是比較喜歡自己裝 Ubuntu。</p><hr><p>在 DS918+ 上架網站基本上就跟一般主機一樣，它的網頁伺服器是 Nginx，剛好也是我習慣的。</p><p>我的 Nginx 設定檔長這樣：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.wancat.cc;</span><br><span class="line">    <span class="attribute">root</span> /volume2/WANcatServer/www;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access_log combined;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要笑</p><p>上面做一個重新導向到 www.@，那由於 DS918+ 設定 HTTPS 實在很複雜，我就把這偉大的任務交給 CloudFlare 了。</p><h2 id="域名與-DNS"><a href="#域名與-DNS" class="headerlink" title="域名與 DNS"></a>域名與 DNS</h2><p>域名目前是在 <a href="https://porkbun.com" target="_blank" rel="noopener">Porkbun</a> 上註冊 wancat.cc。本來想買 wan.cat （真的有），但是 .cat 實在太貴，打算用 .cc 。 .tw 域名在台灣基本上都是 800 TWD / year ，除了第一年特價外，實在有點貴，所以不考慮。.cc 每年大約 10 鎂，還算便宜，而且也挺好看的。</p><p>註冊完後 DNS 用 CloudFlare 代管，雖然 DS918+ 可以裝 DNS Server，但我懶的用，CloudFlare 免費方案就很夠用了。</p><p>CloudFlare 我設定了 @, www 兩個 DNS，www CNAME 到 @，都有開雲朵（會經過 CloudFlare），所以可以隱藏真實 IP。我用 Page Rules 做轉址，設定舊網域以及 wancat.cc 會轉址到 <a href="http://www.wancat.cc，用" target="_blank" rel="noopener">www.wancat.cc，用</a> www 的理由是為了避免 Cookie 在不同 subdomain 被重用。詳細理由參考：<a href="https://bjornjohansen.no/www-or-not?utm_source=wanqu.co&amp;utm_campaign=Wanqu+Daily&amp;utm_medium=email" target="_blank" rel="noopener">bjornjohansen.no</a></p><p>本來我是自己用 Nginx 轉址，但速度有點慢，今天改用 CloudFlare 就幾乎是瞬間完成了，我現在對它依賴度越來越高了。</p><p>如果要讓 ssh 連，可以直接連 ip 或是開一個 ssh.@，然後雲朵不要開（不會經過 CloudFlare，直接回應 IP），就可以連了。好像有更安全的作法，但我也懶的用了（茶）</p><h1 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h1><p>自己架網站也半年了，從痞客邦到 Medium 到 Hexo，不過弄了這麼多還是不會寫網頁。買了五年的網域，希望自己的網站可以再撐五年（茶）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;網站建置紀錄&quot;&gt;&lt;a href=&quot;#網站建置紀錄&quot; class=&quot;headerlink&quot; title=&quot;網站建置紀錄&quot;&gt;&lt;/a&gt;網站建置紀錄&lt;/h1&gt;&lt;p&gt;我的網站從 2017 年六月第一次上 GitHub Page，到現在 &lt;a href=&quot;http://www
      
    
    </summary>
    
    
      <category term="Server" scheme="https://www.wancat.cc/tags/Server/"/>
    
      <category term="Website" scheme="https://www.wancat.cc/tags/Website/"/>
    
  </entry>
  
  <entry>
    <title>理想王與潰爛王的一天</title>
    <link href="https://www.wancat.cc/2019/01/01/king-in-the-mud/"/>
    <id>https://www.wancat.cc/2019/01/01/king-in-the-mud/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2018-12-31T15:02:45.770Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>　　理想王與潰爛王是出於鄭問漫畫—<a href="https://readmoo.com/book/210089486000101" target="_blank" rel="noopener">深邃美麗的亞細亞</a>中的角色。</p><p>　　理想王有著建立一個「理想國」的理想，畢生為此努力。他過著規律且高度自我要求的生活，但他不只要求自己，還連帶要求了周遭的所有人。他殺掉不符合理想世界的人，他甚至透過「理想錶」控制與洗腦人民；但他也願意為了理想放棄一切，在與完美王的對決中，當他知曉有能力比他更高的完美王，他願意由完美王來實踐理想，證明他所在乎的不是權力，而是理想。</p><p>　　潰爛王有著高深莫測的能力，他有著高潔的思想，主張順應自然，不去做些什麼，只是成日「漂著」，像一灘爛泥般。潰爛王表面上無所事事的漂著，但其實在養精蓄銳，累積他的能量。</p></blockquote><p><img src="/photo/ideal-king.jpeg" alt="理想王照"></p><h1 id="理想王與潰爛王的一天-King-in-The-Mud"><a href="#理想王與潰爛王的一天-King-in-The-Mud" class="headerlink" title="理想王與潰爛王的一天   King in The Mud"></a>理想王與潰爛王的一天   King in The Mud</h1><p>早上五點，理想王關掉鬧鐘，起身，開始他計畫好的一天。  </p><p>簡單梳洗後，理想王坐在電腦前，操作著 Linux 系統，開始工作。六點四十，理想王闔上電腦，準備去上學。</p><p>七點半，理想王拿出抽屜中的一本講義。他不喜歡學校，他不喜歡時間被他人安排，在面對內容不理想的課程時，他拿出講義，自顧自的寫著，因為他不想浪費回家後一絲一毫的時間來應付學校的作業。</p><p>下課時，理想王放下講義，拿著已經用了六年的直笛，走到教室一隅，吹著自己譜寫的旋律。吵雜的教室內，沒有人聽著，但理想王不在乎，因為他明瞭，總有一天會有屬於他的聽眾。</p><hr><p>五點，潰爛王放學了。</p><p>背著尚未完成的作業，漫步走出校園－書包較昨天沉了些，潰爛王步伐緩慢，彷彿在泥沼中漂浮，但比起他的步伐，他的內心更像一灘爛泥。潰爛王眼睛盯著不斷向後的腳下，眼神平靜，但內心在翻攪，企圖在這灘爛泥中，找尋一項非常重要的事物，但又隨即忘了是什麼，繼續望著腳下的地面，只在偶爾瞧見蟑螂屍體時，心才又產生了波動。</p><p>五點十五，潰爛王回到家，一股腦地倒在沙發上，他知道他該去做功課，但身體長了根，深深地箝入沙發裡，飢渴的想從沙發中汲取些什麼。「什麼？」，潰爛王不知道，他不餓，坐一整天並不消耗多少血糖；他不累，但大腦似乎比身體更加疲憊。</p><p>潰爛王打開書包，開始做功課，可是寫沒兩個字，潰爛王又開始在泥沼中翻找。「什麼？」，潰爛王心思紊亂，眼睛雖盯著題目，但一個字都讀不進去。「BDCBA」，潰爛王隨手猜完剩下的題目，便將作業扔到一邊。</p><hr><p>五點，鬧鐘響了。今天是段考，理想王昨天為了段考特別早睡，走到書桌，打算再做最後的複習，不過想想自己也沒什麼好讀的了，於是打開電腦，繼續工作。</p><p>七點二十，理想王到了學校。他討厭段考，因為段考會破壞他好幾天的工作時間，又會讓他精神變差。但理想王還是應付著，考前的週末仍然會多花時間讀書，縱然段考結果根本無關緊要，每次段考理想王還是認真地準備。</p><p>暑假時，理想王規定自己每天要看四小時的書，書桌上複習講義排一列，每本翻開都可以看到理想王的筆跡。暑假第一天，理想王老實的讀了四小時，四小時結束後，理想王有種虛脫的感覺，很累、非常累，他發覺自己唸書比在學校坐著要累多了，而當他唸完書後，也沒什麼精力工作了。當暑假過了一個禮拜後，理想王突然驚覺，自己這個禮拜似乎什麼也沒做，沒有學習到新的事物，沒有完成自己安排的工作。</p><p>他發覺，自己儘管花了那麼多時間寫複習講義，他的心智卻沒有一絲一毫的成長，反而變得更沒耐心、更加死板，開始只在乎題目，開始不重視真實。</p><p>打鐘了，學生們收拾書本，準備開始考試。理想王心思回到了學校，握著已經磨圓的 2B 鉛筆，準備好成為稱職的考試機器。</p><hr><p>收卷了。潰爛王放下手中的筆，手臂還隱隱作痛。想著剛才寫的作文，心裡感到很糟糕，他喜歡寫作，但 45 分鐘的限制，讓潰爛王總是寫出一篇又一篇的垃圾。稿紙太小，放不下他的思想，而那所有關於「青春」、「校園生活」的題目，都使他腦袋空白。</p><p>四點，段考提早放學，或該說是正常時間放學。潰爛王帶著成績單，徐徐走出校園，他冷眼看著熱鬧的球場、興奮討論的學生們。一點都高興不起來，潰爛王十分空虛，滑開手機，看著長長一串準備在段考後完成的工作，但他一點幹勁都沒有。眼光飄到行事曆，下次模擬考就在三週後，心又更沉了。潰爛王關上螢幕，低頭繼續走。</p><p>四點十五，回到家，潰爛王隨手將書包扔在一旁，便走向電腦。開了機，看著他的 Linux 系統，卻不知要幹嘛。打開遊戲，玩不到十分鐘又把它關掉了。潰爛王<strong>無聊極了</strong>，坐在沙發滑手機，想看些技術文章，卻又沒耐心讀完，於是一直存到 Pocket，稍後閱讀，儘管自己也知道未來不會讀。潰爛王突然感到眼睛酸痛，就放下手機，睡了。</p><hr><p>五點二十七，他關掉鬧鐘，看了手錶一驚，自己竟讓鬧鐘吵了半個小時。</p><p>躺在床上看著天花板，他竟不知該如何安排這一個半小時的時間，這早晨的黃金時段，讀書？寫程式？寫文章？他什麼也不想做，轉身把燈關掉，繼續睡。</p><p>七點二十，到了學校，他看著滿是教科書的抽屜，隨便抽了一本，但眼睛沒法好好對焦在題目上，心也是。早修的考卷發了下來，他對著考卷發呆，每當他試圖回想方才究竟在思索什麼，卻又忘的一乾二淨。記憶體塞滿了資料，又被刪個精光，什麼都沒留下；CPU 忙碌的在各個程序做切換，卻一個也做不好。</p><hr><p>七點十五，美好週末早晨。他看著段考前留下的 To Do List。「什麼都沒解決呢」，卡住的佇列，無數的 Zombie Process，和被無用資料佔滿的記憶體。</p><p>他再也無法忍受了。</p><p>他坐下，閉上眼睛，慢慢清空前景的程序。<strong>他不再翻攪了</strong>，心中那片爛泥，彷彿從沸騰的、冒泡的，逐漸安靜、冷卻下來，變成一片寂靜的泥沼。漸漸的，泥沼開始沉澱，水變得澄清。而在水中的，似乎就是他一直在找尋的那個「什麼」。</p><p>$ reboot</p><hr><p>他睜開眼睛，看著貓咪懶洋洋的，躺在週末早晨的和煦陽光下。</p><p><strong>他知道答案了</strong>，他帶著水，走向書桌，繼續修築他的理想。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;　　理想王與潰爛王是出於鄭問漫畫—&lt;a href=&quot;https://readmoo.com/book/210089486000101&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深邃美麗的亞細亞&lt;/a&gt;中的角色。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我在技藝班所見所聞</title>
    <link href="https://www.wancat.cc/2018/12/04/vocational-courses/"/>
    <id>https://www.wancat.cc/2018/12/04/vocational-courses/</id>
    <published>2018-12-04T12:22:23.000Z</published>
    <updated>2018-12-18T11:52:41.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我在技藝班所見所聞"><a href="#我在技藝班所見所聞" class="headerlink" title="我在技藝班所見所聞"></a>我在技藝班所見所聞</h1><img src="/2018/12/04/vocational-courses/circuit-board.jpg" class="slug"><p>在<a href="/2018/10/14/progression/">先前的文章</a>提到過，我高中計畫就讀<a href="https://myweb.ntut.edu.tw/~wwwoaa/entrance/fjcp/fjcp-5.html" target="_blank" rel="noopener">北科大五專精英班</a>，由於這個班不好考，所以我在國三參加技藝班，用來在超額比序中加分。</p><p>我選擇的是<strong>電機電子群</strong>，學習內容大致是 <em>焊接、佈線，以及計算電壓</em> 。</p><h2 id="焊接"><a href="#焊接" class="headerlink" title="焊接"></a>焊接</h2><p>我在加入技藝班之前已經有焊接的經驗，當初為了做 Arduino，有時需要自己焊零件，當時沒有觀念，買了烙鐵沒買海綿和烙鐵架，烙鐵頭第一天就黑了。也不知道要在電路板上焊，焊得又髒又醜，有時還把零件弄壞。</p><p>上了技藝班之後我才第一次使用了整套的焊接工具，烙鐵、烙鐵架、海綿、吸錫器、尖嘴鉗、斜口鉗、剝線鉗，技藝班的工具還不錯，至少設備完整、錫的品質還算優。</p><p>技藝班的課程基本上都是自己實做，老師會指定今天要做的東西，然後就讓同學開始做，第一天從焊三角錐開始，把六根電線兩端剝掉，焊成一個立體的正三角錐。後來還有練習拉線、做跳線、做電路，我認為這些都很好，在上了技藝班後我的焊接技巧的確提昇了不少，至少可以準確掌握烙鐵溫度與習性，可以讓手中的錫乖乖聽話。</p><p>當然班上有些同學對此沒有興趣，有些還會在旁邊亂，這不稀奇，不管是什麼課程總會有人沒興趣。只要對我而言，這是很有用的，這就夠了。</p><p><strong>可惜並非如此</strong></p><h2 id="計算"><a href="#計算" class="headerlink" title="計算"></a>計算</h2><p>技藝班的課程還有一環是練習「計算」，主要計算的內容是一個電路圖指定位置的電壓和電流。大概在第四堂課開始，老師給我們上計算的課程，老師直接告訴我們公式怎麼算，沒有多做解釋為什麼要這樣算。</p><p>對於這個我可以理解，畢竟大部分上技藝班的學生並不一定能吸收，就像是現在的國中教育，許多老師也是直接教公式，沒辦法，你就算教了原理學生也聽不懂。只是從中我發現<strong>我並不那麼適合技職教育</strong>，我的骨子裡還是希望追根究底想明白，我無法接受自己搞不懂的公式。</p><p><strong>但這不是最糟的</strong>。</p><p>所有的計算都是「用手算」，電壓的計算基本上數字不會給你太好看，不用想約分什麼的，常常有那種 50.9 V、51 K 的缺德數字，常常你要處理的是<strong>四位數除上三位數的除法</strong>，而且要<strong>算到小數第四位四捨五入到第三位</strong>。</p><img src="/2018/12/04/vocational-courses/process.jpg" class="slug" title="計算過程"><p>我真的無法理解，我們是未來要操作電腦的人，為什麼要做電腦完全可以取代的事？<strong>我們應該學習的是如何善用電腦，怎麼會是把人當電腦用？</strong></p><p><strong>在這個 AI 的時代，教的卻是計算機就能取代的事？</strong></p><p>不為什麼，比賽就是這樣考。技藝競賽的選手就是要面對這種無腦四則運算，然而你完全無法從中得到任何有用的能力，算這個有什麼用？變人體計算機嗎？醒醒吧你永遠算不贏電腦的。</p><p>從這裡我開始看出台灣技職教育的落伍，為什麼那麼多人看不起技職？為什麼師長不願我們選擇技職？</p><h1 id="面對桌上的一盤盤大便"><a href="#面對桌上的一盤盤大便" class="headerlink" title="面對桌上的一盤盤大便"></a>面對桌上的一盤盤大便</h1><p>過去我往往認為是因為社會「唯有讀書高」的觀念，保守家長不願意讓孩子成為一個「做工的人」，但現在我發覺政府自己就將技職教育辦的一團糟！</p><p>我只敢說電機電子群的範圍，我曾經訪問過一些讀過高職的學長，大概了解到現在的高職教學內容實在非常落伍，就像是上面舉的例子，以及各式各樣的遠古程式語言、無法跟上時代的課程，甚至據說某間高職還規定要使用 Windows XP。</p><p>我有位朋友就毫不客氣的說了高職資訊科全部都是 shit，他就是進去念之後才發現教的跟想像中完全不同，於是休學去工作了。</p><p>我知道資訊領域是社會變遷較快的領域，同樣的技術，可能五年、十年過後就變得完全不同，但台灣的技職教育沒有進步，還是在使用 20 年前的課本，還是在教著 20 年前的技術，還是在考學生如何用手算電壓。</p><p><strong>我認同技職教育的價值，但如果政府端不出像樣點的課程，就莫怪學生不願意、企業不稀罕、家長不認同。</strong></p><p>台灣的學生就像是要在<strong>一桌大便中選擇比較不臭的</strong>吃下去一樣，面對一樣爛的高中、高職、五專中，挑一個對自己最沒傷害的，忍痛吞下去，期望熬過去就有比較好的食物吃。</p><h1 id="可悲台灣小孩，有未來嗎？"><a href="#可悲台灣小孩，有未來嗎？" class="headerlink" title="可悲台灣小孩，有未來嗎？"></a>可悲台灣小孩，有未來嗎？</h1><p>我寫這篇文章是希望，政府能重新制定<strong>真正有品質的技職教育課程</strong>，在推廣技職教育的同時，把技職教育的品質做好，教授與時俱進的課程，而不是算電壓這種荒謬的內容。甚至在給準技職學生上的技藝班中，就讓學生看出其之落伍。</p><blockquote><p>「一屆不如一屆」，據說在十幾年前的高職，仍是十分重視實作。然而到了今天，高職卻越來越考試取向。</p><p>我相信台灣是辦得到的，我相信。</p></blockquote><hr><h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="/2018/10/14/poor-Taiwanese-kid/">可悲台灣小孩</a> — 一個國中生，是如何變得不聞不問？</p><p><a href="/2018/10/14/progression/">十五歲的生涯選擇，我為何拒讀高中？</a> — 父子對於升學、技職教育的看法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我在技藝班所見所聞&quot;&gt;&lt;a href=&quot;#我在技藝班所見所聞&quot; class=&quot;headerlink&quot; title=&quot;我在技藝班所見所聞&quot;&gt;&lt;/a&gt;我在技藝班所見所聞&lt;/h1&gt;&lt;img src=&quot;/2018/12/04/vocational-courses/circ
      
    
    </summary>
    
    
      <category term="教育" scheme="https://www.wancat.cc/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>SITCON 首次參與心得</title>
    <link href="https://www.wancat.cc/2018/12/02/sitcon-first-meet/"/>
    <id>https://www.wancat.cc/2018/12/02/sitcon-first-meet/</id>
    <published>2018-12-02T13:41:49.000Z</published>
    <updated>2018-12-02T13:55:16.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SITCON-首次參與心得"><a href="#SITCON-首次參與心得" class="headerlink" title="SITCON 首次參與心得"></a>SITCON 首次參與心得</h1><blockquote><p><a href="https://sitcon.org" target="_blank" rel="noopener">SITCON</a> 學生計算機年會係一學生自發組成的研討會，秉持著以學生為主軸的核心價值，藉以凝聚與傳遞學生的力量。希望藉由提供一個經驗交流與資訊技術實務分享的平台，使已有成就者能夠傳承己身經驗，嶄露頭角者在激盪中獲得靈感與啟發，並同時讓初入茅廬者得以對資訊科學有更深入的了解；進而達到「學以致用、教學相長」的目標。</p><p>——取自 <a href="https://sitcon.org" target="_blank" rel="noopener">SITCON 官網</a></p></blockquote><p>在上次的<a href="/2018/10/14/progression/">升學議題討論</a>時，我認識了 <a href="https://sean.cat" target="_blank" rel="noopener">Sean</a>，他幫我拉進了許多社群，像是 Mozilla、SITCON、Minecraft 等等，雖然在群組裡我都沒什麼說話，畢竟小小菜逼八，跟大家不熟，也不敢說什麼。</p><p>幾個禮拜前，SITCON 開始徵稿明年的演講，我就先投了上次寫的<a href="/2018/12/02/sitcon-first-meet/">大斗內時代</a>，聽議程組說是頭香。我就打算再進一步參與社群，於是參加了今天在台中的聚會。台中的技術社群聚會很少，這次機會難得，我就二話不說去了。</p><p>不過就跟今年的 JSP 一樣，我又是單槍匹馬的去，心中還是有點緊詹的，而且雖然是學生社群，但我和大家的年齡還是差了蠻多，在場大部份是大學生，只有少數幾個高中生，國中生是沒有見到。</p><h1 id="今日主題"><a href="#今日主題" class="headerlink" title="今日主題"></a>今日主題</h1><p>今天有三個資安主題的小演講，每場 40～60 分鐘左右，我在先前沒什麼接觸資安，老實說沒辦法聽很懂，也很難提出問題，<strong>只有能完全理解內容的人，才能提出精闢的「好問題」</strong>。</p><p>雖然我並非想朝資安發展，不過多多了解，也對自己的資訊安全有幫助，而且我有管理伺服器，伺服器的維安也是我很大的責任，有好的資安知識是很重要的。</p><p>今天的前兩場主題都是 App 的資安，第一場在講政府的 App 安全檢測政策，第二場則是現場示範用 Charles 做中間人攻擊，可憐的肯德基叔叔和日立冷氣就被抓來開刀了 XD。</p><h2 id="中間人攻擊"><a href="#中間人攻擊" class="headerlink" title="中間人攻擊"></a>中間人攻擊</h2><p>今天大致學到的是憑證的重要性，沒有憑證或是用自己簽的憑證，很容易遭受中間人攻擊，也就是中間人假冒服務器，接受客戶端連接，再假冒客戶端與真正的服務器連線，讓客戶端與服務器都以為是安全的連線，藉此竊取資料。</p><p>這是 SSL 非對稱加密也沒辦法解決的問題，雖然你可以確保只有這個公鑰的主人可以解開訊息，但你沒辦法確定公鑰的主人是不是對的人。因此現在的 HTTPS 都需要與憑證機構配合，網站擁有者需要向憑證機構簽署憑證，客戶端只要向憑證機構詢問此公鑰的擁有者，就可以確定是不是該網站的公鑰了。</p><p>以我自己架網站的經驗，弄 HTTPS 其實還挺麻煩的（是我太廢），首先要有簽署過的憑證，不過現在有<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>這樣可以自行簽署的網站，自己架網站門檻已經沒那麼高。我的伺服器現在是用 <a href="https://cloudflare.com" target="_blank" rel="noopener">CloudFlare</a> 做 CDN，所以就用它附帶的 HTTPS 功能，實在是蠻方便的，可以驕傲的有綠色鎖頭。</p><h1 id="認識新朋友"><a href="#認識新朋友" class="headerlink" title="認識新朋友"></a>認識新朋友</h1><p>其實這次參加最大的目的在認識新朋友，雖然已經加入 SITCON Telegram 群組幾個月，不過都沒有說過話，畢竟在近千人的群組講話還滿有壓力的，我也覺得實體的聚會比較好認識朋友。</p><p>第一場演講結束後，SITCON 共同發起人 <a href="https://about.me/denny0223" target="_blank" rel="noopener">DennyHuang</a> 就來找我聊聊。三場演講結束後，開放聊天時間，我也找到一位朋友談了許多資訊相關的話題，活動結束後，也和一些人交換了 Telegram。</p><hr><p>今天只寫一點點小紀錄，期待未來參與更多活動！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SITCON-首次參與心得&quot;&gt;&lt;a href=&quot;#SITCON-首次參與心得&quot; class=&quot;headerlink&quot; title=&quot;SITCON 首次參與心得&quot;&gt;&lt;/a&gt;SITCON 首次參與心得&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="life" scheme="https://www.wancat.cc/tags/life/"/>
    
      <category term="SITCON" scheme="https://www.wancat.cc/tags/SITCON/"/>
    
  </entry>
  
  <entry>
    <title>專案企劃：歷史時間線</title>
    <link href="https://www.wancat.cc/2018/12/01/history-time-line/"/>
    <id>https://www.wancat.cc/2018/12/01/history-time-line/</id>
    <published>2018-12-01T06:27:59.000Z</published>
    <updated>2018-12-01T06:41:39.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="專案企劃—歷史時間線-History-Time-Line"><a href="#專案企劃—歷史時間線-History-Time-Line" class="headerlink" title="專案企劃—歷史時間線 History Time Line"></a>專案企劃—歷史時間線 History Time Line</h1><p>歷史時間線是一個開放教材計畫，整理國高中階段的所有歷史事件，透過讓玩家排列順序的方式，來達到熟記歷史事件先後順序。</p><p>本計畫參考桌遊 &lt;時間線&gt; 的遊戲方式，玩家會得到有著歷史事件名稱的卡片，要將其置入時間線的正確位置。</p><p>每次遊戲完成後即可得到一張專屬的時間線，並可匯出為 PDF 或是圖片檔。</p><h1 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h1><ul><li><p>利用分類可做出不同種類的專屬時間線<br>主要分成三個大類： Taiwan、China、World。再用 tag 做進一步的分類，eg：政治、文化、宗教、社會</p></li><li><p>可重複練習<br>由於是設計成可互動式，藉由反覆的練習可以加深記憶，並且由不同事件的組合，對於歷史的脈絡有更深刻的印象。</p></li></ul><h1 id="實做細節"><a href="#實做細節" class="headerlink" title="實做細節"></a>實做細節</h1><p>目前資料使用 LibreOffice Calc 以表格的方式製作，將來若作為網頁遊戲可先 export 為 csv 檔再存入各種資料庫中。</p><p>未來將會朝向<strong>網頁遊戲</strong>方向製作。</p><h1 id="歡迎加入、提供意見"><a href="#歡迎加入、提供意見" class="headerlink" title="歡迎加入、提供意見"></a>歡迎加入、提供意見</h1><p>現在計畫仍在構想階段，歡迎有興趣者加入計畫或是提供意見。歡迎來信 <a href="mailto:wancatserver@gmail.com" target="_blank" rel="noopener">wancatserver@gmail.com</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;專案企劃—歷史時間線-History-Time-Line&quot;&gt;&lt;a href=&quot;#專案企劃—歷史時間線-History-Time-Line&quot; class=&quot;headerlink&quot; title=&quot;專案企劃—歷史時間線 History Time Line&quot;&gt;&lt;/a&gt;專案
      
    
    </summary>
    
    
      <category term="Project" scheme="https://www.wancat.cc/tags/Project/"/>
    
      <category term="HistoryTimeLine" scheme="https://www.wancat.cc/tags/HistoryTimeLine/"/>
    
  </entry>
  
  <entry>
    <title>軟體開發的未來，是大斗內時代？</title>
    <link href="https://www.wancat.cc/2018/11/06/future-of-software/"/>
    <id>https://www.wancat.cc/2018/11/06/future-of-software/</id>
    <published>2018-11-06T14:43:52.000Z</published>
    <updated>2018-11-09T12:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文從付費軟體的困境，講到<strong>廣告商業模式</strong>以及<strong>付費帳號模式</strong>，再講到近年來日趨流行的<strong>「獎賞制度」</strong>，來談談內容創作的困境，以及當面對網際網路快速發展的因應之道。</p></blockquote><h1 id="軟體如何賺錢"><a href="#軟體如何賺錢" class="headerlink" title="軟體如何賺錢"></a>軟體如何賺錢</h1><p>在我剛開始寫程式的時候，我就曾經想過，<strong>如果我做出了一個很好的遊戲，我該如何賺錢？</strong>，簡單就是賣嘛，付了錢我就給你程式。但這最大的問題是<strong>你如何確定買家不會將你的產品給其他人？</strong>。</p><p>我開始思考各種的商業模式，發現要賣軟體竟是一件相當困難的事，阻止盜版非常困難，其實這本質的原因在於<strong>軟體是一種邊際成本為 0 的產品</strong>。</p><h1 id="付費軟體的困境"><a href="#付費軟體的困境" class="headerlink" title="付費軟體的困境"></a>付費軟體的困境</h1><p>盜版猖獗，永遠是付費軟體最大的困境。軟體之所以有這樣的問題，正是由於它的<strong>「邊際成本為 0 」</strong>。邊際成本是經濟學的名詞，意思是當你增加一份產品時所需要增加的成本。生產一台汽車的成本很大，但生產 10000 量汽車可能平均下來就沒那麼大。而軟體則是一個邊際成本為 0 的產品，你要多賣給一個使用者，頂多光碟多燒一片，不然哪有什麼成本？</p><p>你以為這樣很好嗎？是的，或許你可以節省成本，但 <strong>對於盜版者而言更好</strong> 。你開發軟體需要成本，但盜版的人連開發的成本的省下來了，那對盜版者而言，可真的是「無本生意」。不只是軟體，各式各樣的創作，只要是邊際成本為 0 的，例如文章、圖畫、影片，可以被輕易用電腦複製的，都可說是邊際成本為 0 的產品，因此很容易遭受盜版威脅。</p><p>因此，<strong>邊際成本為 0 的產品，用免費的商業模式最有效率</strong>，我並不是說不該支持使用者付費，只是在效率上，免費的商業模式效率較佳。</p><p>也因為這個原因，導致廣告的商業模式興起。</p><h1 id="免費時代來臨？"><a href="#免費時代來臨？" class="headerlink" title="免費時代來臨？"></a>免費時代來臨？</h1><p>在網際網路普及之後，盜版軟體變得越來越猖獗，基本上所有知名的商業作品一定都有它的盜版，漸漸的，購買正版已經成為一種<strong>額外的支持行為</strong>，講難聽點，是一種<strong>「施捨」</strong>，而不是正常消費途徑了。</p><p>軟體開發商開始注意到這個問題，於是他們開始用一種截然不同的商業模式—免費。從 YouTube、Google 搜尋引擎 ，到 LINE、Facebook ，打開 Play 商店，大部分的 app 也都是免費的，它們依靠著廣告商賺錢。</p><p>你有想過為什麼 Facebook 免費嗎？因為你對它有價值，你的加入會讓你的更多朋友喜歡使用，也就會讓廣告被更多人看見，它就能賺更多錢。</p><p>當你使用一個免費軟體，多半代表你對軟體公司有價值，你就是他們的產品之一，因此你得以免費。所以才會有人說「免費的最貴」這類的話。</p><h1 id="付費帳號-—兼具免費與付費的解法"><a href="#付費帳號-—兼具免費與付費的解法" class="headerlink" title="付費帳號 —兼具免費與付費的解法"></a>付費帳號 —兼具免費與付費的解法</h1><p>如果我真的不想要廣告呢？現在還有「付費帳號」這種解法，例如 <a href="https://medium.com/" target="_blank" rel="noopener">Medium</a>, <a href="https://getpocket.com/" target="_blank" rel="noopener">Pocket</a>, <a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 等公司，在除了提供免費服務外，另外提供了「付費版帳號」，讓想要更多功能的使用者可以購買付費版，這樣既能保持不受廣告控制，又能有經濟收入。</p><p>但<strong>付費版帳號就不會被盜版嗎？</strong>，事實上，比較難。現代的各種付費商業模式多半是採「帳號制」，也就是你購買的是一個帳號。只要是帳號，就比較好控制，因為資料在公司內部的伺服器，如果服務是在網頁上的話更是如此，使用者無法取得完整的程式（只能夠取得單一網頁的 HTML、JavaScript …），也就比較難被逆向或是破解，因為所有的程式碼都在公司自己的伺服器中。</p><p>想想看，你一定有聽過盜版的威力導演、盜版的 Windows，但你有聽過 <strong>盜版的 YouTube</strong> 嗎？盜版的 Medium？盜版的 GitHub？我相信你沒有，因為將帳號資料放在伺服器，基本上就能夠避免無限量複製，因為服務是「認帳號」，你沒有帳號，空有程式也沒用。事實上，現在許多 YouTuber 使用的付費訂閱 <a href="https://www.pressplay.cc/" target="_blank" rel="noopener">PressPlay</a> 就是採用帳號制，內容都在 PressPlay 的伺服器，它可以依據你帳號的狀態來決定是否要給你內容，因此你很難盜版。而有名的付費遊戲— Minecraft 也是採帳號制，這樣可以方便使用者在不同設備遷移，而且管控簡單。</p><h1 id="大斗內時代，可能嗎？"><a href="#大斗內時代，可能嗎？" class="headerlink" title="大斗內時代，可能嗎？"></a>大斗內時代，可能嗎？</h1><p>但即使是上述所說的付費帳號制度，仍然是有可能被盜版的，因此在過去許多軟體開發商設計很多數位鎖，想要防止被盜版，但 <strong>歷史證明，都沒有用</strong>。開發數位鎖浪費了軟體開發商的大筆時間和金錢，但最後鎖住的，卻往往是有良心乖乖買正版的使用者。</p><p>因此有人開始提出了新的解決方案，<strong>獎賞制度</strong>，你可以免費的使用，但如果你喜歡，請你給我一點報酬。這樣的方式開始逐漸的流行，之所以崛起，很大程度是因為<strong>「網路的更發達，讓線上支付的門檻降低了」</strong>。</p><p>當你在街上看到一位優秀的街頭藝人，你聽完了他的表演，覺得很不錯、很精彩，於是就給了他十塊錢，這很容易，因為十塊錢對你來說是小錢，而「將錢投入帽子中」這個動作又十分的簡單。</p><p>但如果你今天在網路上看到一個創作者的影片，他的內容一樣很精彩，你一樣想給他回饋，但如果你沒辦法用非常簡單的方式給他十塊錢，你很可能會打消念頭。當你想到你可能需要設定信用卡，或是到便利超商付款，甚至是對安全的隱憂，你可能就因為怕麻煩而算了，心理默默為他感到可惜，「假如可以更簡單一點，我就願意給你報酬了」。</p><p>但在近年來，線上支付開始變得便利而安全，這個門檻有越來越低的趨勢；而加密貨幣的興起，也讓未來網路的支付有新的可能。因此開始有 <a href="https://info.matters.news/" target="_blank" rel="noopener">Matters</a> 這種，創作公開，但能使創作者有回報的平台出現。  </p><h2 id="案例研究：Elementary-OS、好和弦"><a href="#案例研究：Elementary-OS、好和弦" class="headerlink" title="案例研究：Elementary OS、好和弦"></a>案例研究：Elementary OS、好和弦</h2><p><a href="https://elementary.io/" target="_blank" rel="noopener">Elementary OS</a> （以下簡稱 Elementary）是一個開源的 Linux 發行版，它是完全開源的，但希望你能夠付費下載，事實上，<strong>它讓你自己決定要花多少錢購買它</strong>，包括 0 元。</p><p>在它的軟體商店 AppCenter，有一些由他們所製作的軟體，會根據他們的看法標一個建議價格，但你仍然可以自己決定要花多少錢購買它。你也許會懷疑，這樣子真的賺得到錢嗎？但我認為這是一個成功的操作體驗，我既可以免費的使用，也可以在使用完，覺得它真的不錯時，用實際行動給予鼓勵。</p><p>與此類似的還有台灣的音樂教學 YouTuber —<a href="https://www.youtube.com/channel/UCVXstWyJeO6No3jYELxYrjg" target="_blank" rel="noopener">Nicechord 好和弦</a>，他做的是音樂創作、樂理教學，內容質量非常高，但他並沒有開啟 YouTube 營利功能，也就是<strong>他的影片並沒有收廣告費用</strong>，他是靠賣<strong>「家庭號大包裝」</strong>來營利，而家庭號大包裝的內容通通都在 YouTube 上。而價格也很自由，是<strong>「一塊美金以上的任意價格」</strong>，這樣既免了盜版的問題（因為所有內容都可以在 YouTube 免費取得），而且可以得到收入，又能有著相當好的形象，我認為是相當有智慧的商業模式。</p><p>但獎賞制度的最大困境在於收入的不穩定，且需要來自良好的形象。正如同街頭藝人沒辦法有相當穩定的收入，依賴捐款或是「獎賞」的收入也很難預測，或許當經濟變得蕭條時，人們就會減少這類的支出，導致收入變少，這也是現在比較難克服的問題。</p><h1 id="創作者的未來"><a href="#創作者的未來" class="headerlink" title="創作者的未來"></a>創作者的未來</h1><p>在經歷了網路快速發展後，讓付費的軟體開始無法繼續生存，逐漸被免費軟體取代。但在逐漸重視隱私權的今天，廣告收益模式又越來越受到詬病，而其帶來的流量取向、內容敗壞等問題，也讓創作者越來越難以生存。</p><p>但近來有了新的轉機，科技的進步讓線上支付變得更加輕易，或許在不久的將來，線上支付、加密貨幣的發展使得「讚賞」變得像把硬幣丟進帽子一般簡單，那時利用網路的傳播能力，其收入絕對不是街頭藝人可以比擬的。</p><p>套一句囧星人在 <a href="https://www.youtube.com/watch?v=f-xhJVy5aMc&amp;list=PLLpuTxD1V1hx3hpQq4S0B-e3QDpogJYcZ&amp;index=2&amp;t=0s" target="_blank" rel="noopener">&lt;盜版的未來&gt;</a> 影片中所說的話：</p><blockquote><p>這將會是個創作者的大好時代</p></blockquote><p>對此，我感到十分期待。</p><h1 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h1><p>這次的文章，我很大的啟發是來自於囧星人 &lt;盜版的未來&gt; 這支影片；而 INSIDE 文章 &lt;從付費到免費再到補貼 —— 商業模式變遷的底層邏輯&gt; 讓我對於商業模式變遷的實際原因有了更深入的了解，兩者都有非常精闢的內容，強力推薦。<br><a href="https://www.youtube.com/watch?v=f-xhJVy5aMc&amp;list=PLLpuTxD1V1hx3hpQq4S0B-e3QDpogJYcZ&amp;index=2&amp;t=0s" target="_blank" rel="noopener">盜版的未來｜資訊分享，鎖得住？—冏星人</a><br><a href="https://www.inside.com.tw/2018/10/26/payment-to-freemium-to-subsidies" target="_blank" rel="noopener">從付費到免費再到補貼 —— 商業模式變遷的底層邏輯 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文從付費軟體的困境，講到&lt;strong&gt;廣告商業模式&lt;/strong&gt;以及&lt;strong&gt;付費帳號模式&lt;/strong&gt;，再講到近年來日趨流行的&lt;strong&gt;「獎賞制度」&lt;/strong&gt;，來談談內容創作的困境，以及當面對網際網路快速發展的因應
      
    
    </summary>
    
    
      <category term="社論" scheme="https://www.wancat.cc/tags/%E7%A4%BE%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>OurLiveWorld 回到過去</title>
    <link href="https://www.wancat.cc/2018/10/20/time-travel/"/>
    <id>https://www.wancat.cc/2018/10/20/time-travel/</id>
    <published>2018-10-20T06:33:34.000Z</published>
    <updated>2018-10-26T10:12:52.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自古以來，穿越時空的能力令人嚮往，但就算你是神（創造），仍無法辦到。</p></blockquote><h1 id="地獄之旅"><a href="#地獄之旅" class="headerlink" title="地獄之旅"></a>地獄之旅</h1><p>故事要從我們一次去地獄的冒險開始說起。隨著文明的開發，我們世界的地獄資源越來越短缺，尤其是大量的 <strong>終界箱</strong> 需求，讓烈焰桿的消耗超乎預期，用完已經是不久之後的事了。  </p><p>因此我們計畫一趟地獄要塞之旅，我們在先前的日子裡已經發現了地獄要塞的存在，也去過幾趟，把一些寶箱都開箱了。但儘管去了很多趟，它仍是十分危險的地方，底下一大片岩漿海不說，整個要塞遍布著發射火球的 <strong>烈焰使者</strong>，還有很難打的 <strong>凋零骷髏</strong>。</p><p>這天剛好 Andrea 有空，我們就一起來出任務。</p><h2 id="出發"><a href="#出發" class="headerlink" title="出發"></a>出發</h2><p>我們基於先前去得到的材料，烈焰桿與熔岩球，得以釀製抗火藥水，有了抗火藥水，就不怕烈焰使者的攻擊，基本上在要塞就安全了多。</p><p>走地下道，來到了我們的轉運站 —地獄門，出發到了地獄，尋著過去留下的痕跡，一路找尋到了地獄要塞的入口。</p><p>Andrea 說下山的路不好走，於是我們 <strong>挖了一條隧道下山</strong>，接著吞了抗火藥水，進入要塞之中。</p><h2 id="遇害"><a href="#遇害" class="headerlink" title="遇害"></a>遇害</h2><p>Andrea 第一次進到這座要塞，非常的緊張，不知路怎麼走又一直遇到凋零骷髏。而我目的要刷烈焰使者，一時也不知在哪刷比較好，隨意的上了一棟高樓，就準備開刷了。</p><blockquote><p>我拿我的鑽劍去敲了一下，烈焰使者受傷，飄到空中，打不到。我拿出我的神弓，拉滿弓一射，好巧不巧一隻殭屍豬人走到我面前。</p></blockquote><p>頓時，四周響起了殭屍豬人憤怒的聲音，我知道我犯下大錯了，趕緊轉身就跑，Andrea 注意到了，但她不熟悉路，也幫不到我。</p><p>我從高台上往下跑，一路沒煞車，在走一條一格寬的樓梯時差點跌進岩漿海。</p><p>我跑到了要塞的走廊上，這時連凋零骷髏也來找我了。後方是幾十隻憤怒的殭屍豬人，而前面則有凋零骷髏數只，我心一橫，有我這把鋒利4鑽劍，還有什麼打不贏的敵人？</p><p>但在緊張下，我的攻擊卻屢屢放空，而後方 Andrea 的救援卻遲遲不來，舉盾擋住一邊就遭到另一邊的攻擊，凋零骷髏的凋零效果讓我看不清血量。而當我正在吃金蘋果時，眼前出現了一片紅屏。</p><h3 id="我死了。"><a href="#我死了。" class="headerlink" title="我死了。"></a>我死了。</h3><h1 id="一場空"><a href="#一場空" class="headerlink" title="一場空"></a>一場空</h1><p>憤怒的殭屍豬人停止了，恢復了平常呆呆的樣子。Andrea 終於到了，但看到的已是掉了滿地的物品。她趕緊幫我撿起來，能撿多少算多少，但她的背包太滿，裝不下我的所有裝備。</p><p>我在家裡重生，望著自己空空的背包，以及歸零的經驗條。趕緊抓了些破衣服，拿了把粗製的鐵劍，帶瓶抗火藥水，準備衝回地獄。</p><p>Andrea 聽我的指示，先離開危險的要塞，回到我們地獄的基地，我和她在基地會合，先給我一些撿到的物品。</p><blockquote><p>就只有這樣？</p></blockquote><p>只撿回了一把鑽劍，我那吃到一半的金蘋果，以及一條褲子。</p><p>「也許還有些遺落的在那邊」，我們趕緊出發，再次進入要塞，但到了我所死亡的地點，卻不見任何東西。</p><blockquote><p>不會吧…</p></blockquote><p>我不敢相信，在要塞中不斷尋找，但就是找不到我遺落的物品。</p><hr><p>回到了家中，我的裝備已不再，原本一趟掠奪之旅，竟然換來一場空。</p><blockquote><p>「你想…回到過去嗎？」</p></blockquote><h1 id="回到過去"><a href="#回到過去" class="headerlink" title="回到過去"></a>回到過去</h1><p>「可以嗎？」，Andrea 十分震驚，因為 <strong>就算是創造的世界，仍辦不到穿越時空這件事。</strong></p><p>其實在八月的時候，我就開始用版本控制工具 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 來紀錄我們的世界，每次玩完就會做一個紀錄。因此我就得以回到過去存檔的任何時間點。</p><p>我先關閉了伺服器，將這次的更動先放到一個分支，將世界 checkout 回主分支，就回到了我們出發前的世界。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  </span><br><span class="line">$ git checkout -b dead-branch</span><br><span class="line">$ git commit -m &quot;死了&quot;</span><br><span class="line">$ git checkout master</span><br><span class="line">$ ./start.sh  </span><br><span class="line">  </span><br><span class="line">... </span><br><span class="line">   </span><br><span class="line">Done  </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>我啟動了伺服器，登入。</p><p>眼前出現了我的家，而手中握著的正是我失去的裝備。<br>我笑了。</p><h1 id="來自未來的地獄樓梯"><a href="#來自未來的地獄樓梯" class="headerlink" title="來自未來的地獄樓梯"></a>來自未來的地獄樓梯</h1><p>在回到了過去後，我們進展非常順利，遇到一樣的怪，一樣的附魔，有種不可思議的感覺。</p><p>我們再度到了地獄，卻發現一見非常離奇的事。</p><blockquote><p>「這個樓梯，不是我們剛剛挖的嗎？」</p></blockquote><p>剛才挖的那條樓梯，竟然還在！但它明明已經被 format 掉的啊！<br>我懶的去猜測為什麼，也許我的 Git 沒有把地獄一起存進去吧？</p><p><strong>直到發生了那件事</strong></p><hr><p>過了一段時間後，我們開始了新的計畫，要在沙漠蓋一座宮殿。我們已在另一個創造世界蓋好了草圖，打算用生存複製一份。</p><p>在興建的期間，我為了伺服器的安全性，將伺服器從執行在自己的使用者，改成用一個專門使用者 minecraft 來負責執行，避免有 sudo 權限的帳號被入侵造成系統危險。</p><p>於是我建立了 minecraft 使用者，將世界的檔案 clone 一份過去。我在前些時間將伺服器從官方改成用 <a href="https://www.spigotmc.org/" target="_blank" rel="noopener">spigot</a> ，所以也把 spigot 一起複製過來，剩下的一些舊地圖就不管它。</p><p>由於沙漠與家裡的距離遙遠，約 5 公里，所以我們過去興建了 <strong>地獄高速公路</strong> ，透過地獄 : 主世界移動一格的距離為 8 : 1 的性質來大幅縮減往來的距離。</p><p>這次沙漠宮殿的建案花了我們一兩個禮拜的時間，由於材料都是當地取材，所以很久沒回家去看看了。</p><p>當我們終於完工後，要來鋪地毯，羊毛和染料都放在家裡，所以我就要回家一趟。我進了地獄門</p><blockquote><p><strong>「這裡是哪裡啊！」</strong></p></blockquote><h1 id="地獄消失了？"><a href="#地獄消失了？" class="headerlink" title="地獄消失了？"></a>地獄消失了？</h1><p>我的眼前是一片陌生的大地，雖然我們不常在地獄探險，但畢竟親自蓋了高速公路，對於地貌還是有些印象的。我原先以為是傳送門又跑到了奇怪的位置，過去沙漠的這個傳送門當從地獄回來時常常跑到一些荒郊野外去，很討厭，都必須將新的門破壞掉才能夠恢復原本的通路。</p><p>我原本沒多想，以為這次也是門跑掉，所以就回去拿了炸彈，準備把這個新的怪門給炸掉。所以我叫 Ken 待在主世界，我帶著炸藥過來，我把舊的門炸掉後，再叫 Ken 進到地獄，應該就可以找到原本的門了。</p><p>好巧不巧，我在炸門的時候，一隻殭屍豬人正好給我走過來，而且偏偏還沒炸死，頓時空氣瀰漫著殭屍豬人的憤怒聲，我叫 Ken 趕快過來，一邊奮力反抗。但當 Ken 進來時，新的傳送門卻離上一個沒多遠，但時間緊迫，我趕緊衝進傳送門回到主世界，一隻殭屍豬人也跟著我一起回來了。</p><p>在主世界把那隻殭屍豬人宰殺後，我們開始疑惑了，<strong>怎麼會兩次傳送門都壞掉呢？</strong>，我們決定回家一趟，剛好沙漠的馬廄還有兩匹馬，於是我們騎著馬走著很久未行的驛道回家。</p><hr><p>自從地獄高速公路完工後，這條驛道就荒廢了，久久沒有騎著馬在大地上奔馳，突然也有點懷念。半天過後，我們到達家。</p><p>我們一下馬，馬上衝到地獄傳送門，希望可以趕快找回原本的門。站在傳送門中，看著眼前越來越模糊…</p><blockquote><p>「地形建構中…」<br>「唰」</p></blockquote><p>眼前出現的是一大片陌生的大地，原本的車站、道路、火把，全部都不見了，這時我才恍然大悟</p><blockquote><p><strong><em> 「地獄不見了！」</em></strong></p></blockquote><h1 id="原來是…"><a href="#原來是…" class="headerlink" title="原來是…"></a>原來是…</h1><blockquote><p>「傳送門颼颼聲…」</p></blockquote><p>我愣住了，昔日的車站、高速公路、地獄古堡，地獄熟悉的一切，全部已經不在了，我不敢相信自己的眼睛，反覆的進出地獄，但仍然改變不了事實。</p><p>我突然想起，自己使用 Git 來版本備份，這麼說，檔案應該還在。我關掉伺服器，將地圖回復到教早的版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 4a55</span><br></pre></td></tr></table></figure></p><p>地圖時間回到了一個禮拜前，我開啟伺服器，在進去一次，我一進去就直奔地獄。</p><p>「地形建構中…」</p><p>空氣中充滿著殭屍豬人的憤怒聲，我感到疑惑，<strong>我明明是剛剛才打了殭屍豬人，為什麼一個禮拜前的殭屍豬人會對我生氣？</strong></p><p>我上網查 Minecraft 究竟是怎麼儲存地獄的，在 <a href="https://minecraft-zh.gamepedia.com/index.php?title=%E4%B8%8B%E7%95%8C&amp;variant=zh-tw#.E6.8A.80.E6.9C.AF.E6.80.A7.E4.BF.A1.E6.81.AF" target="_blank" rel="noopener">Minecraft Wiki</a> 查到了這個</p><blockquote><p>地獄的存檔方法與普通世界存檔方法相同，默認都在下列位置：<br>…<br>Linux：<br>~/.minecraft/saves/worldname/DIM-1<br>…<br>注意DIM-1不包含它自己的level.dat。level.dat在其父資料夾，此文件被所有維度使用。這意味著即使玩家改變了個別存檔/world資料夾裡面的數據，地獄傳送門仍然會把玩家傳送到原來那個存檔生成的地獄傳送門，反之亦然。<br>…<br>刪除DIM-1文件將會重置地獄，因此所有玩家在地獄作出的更改和建築都會被消除。</p></blockquote><p>看了這個我才知道，地獄的檔案跟主世界是分開儲存的，我突然想起 <strong>之前回到過去，仍然存在的那座樓梯</strong>，難不成是 <strong>我根本沒有把地獄加入 Git?</strong>。</p><p>我回到了過去在我自己 lancat 使用者裡面的地圖檔案，發現在我的地圖資料夾 OurLiveWorld/ 旁邊，還有著兩個不起眼的資料夾— OurLiveWorld_nether 以及 OurLiveWorld_the_end。我以前看到，都不知道那是什麼，現在恍然大悟，the_end 就是終界，而 <strong>nether 就是地獄啊！</strong>，我找了好久的地獄檔案，就在這個資料夾啊！</p><p>這裡讓我來解釋一下，伺服器會將地獄與終界的檔案存到 worldname_nether 以及 worldname_the_end 中，所以我的目錄結構長這個樣子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OurLiveWorld/</span><br><span class="line">    .git/</span><br><span class="line">OurLiveWorld_nether/</span><br><span class="line">OurLiveWorld_the_end/</span><br></pre></td></tr></table></figure></p><p>我的 Git 只有版本控制 OurLiveWorld 這個資料夾，所以其實只有儲存了主世界的紀錄，其他兩個世界是<strong>完全沒有儲存的</strong>，因此當我更換使用者到 minecraft 的時候，我是直接 git clone 過去，並不是把原本的世界檔案複製過去，所以只有 Git 有儲存的檔案才會被複製過去，因此地獄與終界在 minecraft 使用者那邊就看不到啦！</p><p>當伺服器啟動時，發現找不到地獄和終界，就重新生成了一個，才會發生「新的地獄」的情形。</p><p>同時，因為 Git 沒有儲存到地獄的檔案，因此過去時間旅行時，地獄才會沒有回到過去，解釋了那個神奇的樓梯的存在，與一週前的殭屍豬人為何生氣。</p><p>因此，要修復只要將 OurLiveWorld_nether 以及 OurLiveWorld_the_end 複製過去就行了。</p><p>然後我將原本的 git 移除，建立一個更上層的資料夾 ourliveworld 來將三個世界的檔案都包住，在裡面設定 Git，來讓我可以儲存三個世界，目錄樹就變成這樣：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ourliveworld/</span><br><span class="line">    .git/</span><br><span class="line">    OurLiveWorld/</span><br><span class="line">    OurLiveWorld_nether/</span><br><span class="line">    OurLiveWorld_the_end/</span><br></pre></td></tr></table></figure></p><p>接下來每個世界都可以版本控制了。</p><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>在設定完成後，我再度啟動了伺服器，進到了地獄。眼前是熟悉的車站，熟悉的道路，熟悉的地獄疙瘩田，我漫步走在高速公路上，看著下方的岩漿海。</p><p>突然一隻地獄幽靈從下面出現，朝我的正下方發射了火球，我來不及反應，橋被硬生生炸斷，我掉進了廣大的岩漿海，來不及喝藥水，我就死了。</p><p>我嘆了口氣</p><blockquote><p>「唉…又要回到過去了。」</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;自古以來，穿越時空的能力令人嚮往，但就算你是神（創造），仍無法辦到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;地獄之旅&quot;&gt;&lt;a href=&quot;#地獄之旅&quot; class=&quot;headerlink&quot; title=&quot;地獄之旅&quot;&gt;&lt;/a&gt;地獄之旅&lt;
      
    
    </summary>
    
      <category term="OurLiveWorld" scheme="https://www.wancat.cc/categories/OurLiveWorld/"/>
    
    
      <category term="Minecraft" scheme="https://www.wancat.cc/tags/Minecraft/"/>
    
      <category term="OurLiveWorld" scheme="https://www.wancat.cc/tags/OurLiveWorld/"/>
    
  </entry>
  
  <entry>
    <title>十五歲的生涯選擇，我為何拒讀高中？</title>
    <link href="https://www.wancat.cc/2018/10/14/progression/"/>
    <id>https://www.wancat.cc/2018/10/14/progression/</id>
    <published>2018-10-14T00:42:11.000Z</published>
    <updated>2018-12-04T12:23:26.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="兒子—林宏信："><a href="#兒子—林宏信：" class="headerlink" title="兒子—林宏信："></a>兒子—林宏信：</h1><p>我現在國三，從小六時接觸了 Scratch，國二開始學習 Python 程式語言，我漸漸的確定這是我想走的道路—做一名工程師。</p><p>//Scratch 為一個圖形化的程式語言，可以透過拉積木、組合的方式，來做動畫、寫遊戲。 <a href="https://scratch.mit.edu/" target="_blank" rel="noopener">https://scratch.mit.edu/</a></p><p>小六時，我開始玩 Scratch，心中想著要做出好玩的遊戲分享給大家，於是開始設計遊戲，製作出一個又一個的遊戲，在別人都在玩做好的遊戲時，我在設計屬於自己的遊戲。我很享受這種感覺，將心中的藍圖實現出來， <strong>創造</strong> 的感覺。</p><p>到了國一下學期的時候，我發現 Scratch 已經不敷使用，沒辦法寫出更好的程式了，於是我開始學習程式語言，後來甚至接觸 Linux 作業系統，開始替人做圖書管理系統。在這些過程中，我逐漸確定這是我的熱情所在。</p><h2 id="對高中的不滿"><a href="#對高中的不滿" class="headerlink" title="對高中的不滿"></a>對高中的不滿</h2><p>我平常的生活是，在學校認真上課，將作業寫完，回家就開始 <strong>「工作」</strong> ，寫程式、寫文章、寫音樂。我幫自己安排了很多工作、很多專案，這些都是能使我成長的事，我也樂在其中，但每每遇到段考，就會使我的生活遭到破壞。為了準備考試，我必須將工作的時間拿去讀書，讀一些 <strong>無法使你成長的教科書</strong> ，浪費黃金的課餘時間。</p><p>現在的高中教育，坦白講是為了升大學而存在。內容教授國英數自社等基本學科，但開始越發奇怪，脫離了「義務教育」的範疇。尤其是國文，目前的教學方式 <strong>完全沒有辦法促進表達能力</strong> ，要取得高分只需要 <strong>背誦和考試技巧</strong> 。而考試制度又扼殺了語言的多變性，把文義僅限在唯一的解。</p><p>在我兩個姐姐就讀高中的期間，我就知道了普通高中並非我想要的學校，我將會花許多時間去學習基本科目。但這並非令我反感的原因，對我而言，基本學科的內容也是有趣的，我對於「學習」沒有那麼勢利，不會說要對我有用的知識才肯去學。問題是 <strong>我得花許多時間去準備考試</strong> ，這就不有趣了，事實上這已經不是在「學習」了。而這些時間，是我原本可以用來充實自己、做專案的時間。</p><p>所以我下定決心， <strong>這樣的生活到國中就好</strong> ，三年了，體驗的也夠多了，高中我不要再繼續下去了。</p><h2 id="出路在哪裡？"><a href="#出路在哪裡？" class="headerlink" title="出路在哪裡？"></a>出路在哪裡？</h2><p>我開始去找我的出路，我問了工程師朋友：如果想當工程師要怎麼升學？基本上大多的回答是念普高或高職都可以，重點是大學。我不免感到懷疑，既然大家的目標都是大學，為什麼我們不能直接去考？反而還要在高中三年作為跳板，這樣高中不就像是補習班一樣嗎？</p><p>我對於普通高中的教學內容感到不滿意，認為這會浪費我大量時間和精力，而且會壞了我學習這門知識的胃口，因此我決定走技職的路。</p><p>在我父母的觀念中，是很支持技職教育的，台灣太多只會考試的學生，卻缺乏實做的訓練。雖這麼說，但過去「技職」從來不在我的考慮範圍內，由於成績優異，似乎就是注定要念普通高中，注定要繼續讀書考試下去。</p><p>直到我開始去了解，開始找自己的出路後，我才發現，自己的未來不一定要侷限在普通高中裡，我可以作為一名專業的技術人才，提早開始走自己的道路。很慶幸我的父母在溝通後也支持我的決定，我想 <strong>願意支持孩子決定的父母，就是最好的父母了。</strong></p><h2 id="未來，從現在開始"><a href="#未來，從現在開始" class="headerlink" title="未來，從現在開始"></a>未來，從現在開始</h2><p>我的夢想就是成為一位現在很夯的斜槓青年：工程師/寫作者/作曲家，選擇技職教育不代表限制自己的未來，我相信只要內心清楚方向，走哪都不會迷失。</p><p>我的學校現在目標是 <strong>北科大</strong> 新開的五專菁英班— <strong>自動化工程科</strong> ，內容包括程式設計、電機、機械等內容，這個班之所以吸引我，是因為在那可以得到台北科技大學的豐富資源，而且豐富的實做課程，以及豐富的教師資源，同時我也相信，在只收30人的班級中，能遇到更多像我一樣懷抱著熱情的人。<br>而在生活中一步一步朝著理想邁進，這不就是最幸福的事嗎？</p><hr><h1 id="父親—林寓森："><a href="#父親—林寓森：" class="headerlink" title="父親—林寓森："></a>父親—林寓森：</h1><p>老實說，兒子選擇讀技職體系，心中 <strong>並不是完全沒有遲疑與猶豫的</strong> 。畢竟我是成長於台灣舊聯考時期的人，很多習慣性的反應還是直接出現。像是「你的成績是學霸級的耶，可以念很困難的學科，念技職會不會太可惜了啊」，「你跟其他念技職的人會不會有很大的差異，適應上會不會有問題？」，「現在才國中生耶！交給他自己決定未來行不行啊！會不會是我自己太不負責任，沒有好好幫他們規劃？」。</p><p>其實不光是對兒子，兩個姊姊決定念美術與音樂時，我心裡都有過遲疑。</p><p>但是我心中的這些O.S.我全部沒說出口，因為我相信他們，也相信自己對於個人成長的信念。</p><p>我的信念就先不多說了，有興趣了解的人可以看我在站上發表的文章。我在這裡想對其他為人父母者強調一個我的判斷邏輯—「讓孩子相信自己是一個絕對不會失敗的選擇」。</p><p>這個邏輯並不是說，小孩的選擇不會錯誤；而是說當他們能真正相信自己時，即使選擇錯誤，並不會因此就喪失信心，一蹶不振；當他們是自己做的選擇時，失敗了不會怨天尤人，而是調整自己。當我們試著要去幫他們做未來決定時，依據的是目前的環境狀態，但是未來瞬息萬變，誰也沒辦法有把握一定選對。那麼讓他們做自己喜歡的事情，即使不成功或是過得困難，做的過程總還是有開心的感覺，這就夠了。很多人生活過的舒適、安全、無憂，但是做的不是自己喜歡的事情，甚至不知道自己喜歡什麼，這樣的生活說真的，還比較不快樂。</p><p>所以表面上我做的似乎是一個冒險的決定，但我認為這其實是一個最安全的決定，這取決於背後對於生活價值的信念。</p><p>很多人擔心小孩不夠成熟，讓他們自己決定可能在生活上會很容易失控。我自己的經驗是，當他們覺得可以自己決定時，反而會更謹慎，更會想要聽你的意見參考；而決定了之後，更能投入想做的事情與克制玩樂的衝動。有人會說，「小孩的特質不同，不能一概而論，自制力差的小孩不能這麼做」。</p><p>我的三個小孩的特質都不同，也有人真的自制力不好（就不點名了），但是結果都一樣耶。雖然其他生活部份的自制力各有差異（其實我的自制力是家中成員最差的XD），但是他們對於自己的選擇都是全力投入喔！</p><p>真的沒有理由不相信他們啊！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;兒子—林宏信：&quot;&gt;&lt;a href=&quot;#兒子—林宏信：&quot; class=&quot;headerlink&quot; title=&quot;兒子—林宏信：&quot;&gt;&lt;/a&gt;兒子—林宏信：&lt;/h1&gt;&lt;p&gt;我現在國三，從小六時接觸了 Scratch，國二開始學習 Python 程式語言，我漸漸的確定這是我
      
    
    </summary>
    
    
      <category term="教育" scheme="https://www.wancat.cc/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>當老師對我們說：「可悲台灣小孩」</title>
    <link href="https://www.wancat.cc/2018/10/14/poor-Taiwanese-kid/"/>
    <id>https://www.wancat.cc/2018/10/14/poor-Taiwanese-kid/</id>
    <published>2018-10-14T00:22:13.000Z</published>
    <updated>2018-10-26T10:12:52.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>「這句話真是說到心坎裡」，我笑著說<br>「就只怕過幾年後，他就變『可悲台灣老師』」</p></blockquote><h1 id="一則笑話"><a href="#一則笑話" class="headerlink" title="一則笑話"></a>一則笑話</h1><p>我的朋友有次跟我聊起他的家政老師。</p><p>他的家政老師是一位年輕的新老師，充滿著熱情，似乎希望能在家政課做一些「有意義」的課程。所以他出了很多報告作業，上很多課程，而且從不借課考試，因為他覺得，台灣小孩的綜合、藝文課程被拿去考試，真的很可憐。</p><p>但同學們並沒有認真的去做報告，反而覺得很煩，都只想躺分，丟給組員做。上課也沒什麼在聽，反倒是很多同學在訂正考卷、寫講義等等，根本沒在上課。</p><p>我朋友說，他的老師就很生氣，有次就對他們班同學說：</p><blockquote><p>「你們這群可悲台灣小孩」。</p></blockquote><p>聽到這裡，我已經笑到不行，</p><blockquote><p>「這句話真是說進心坎裡」，我笑著說<br>「就只怕過幾年後，他就變『可悲台灣老師』」</p></blockquote><h1 id="可悲台灣小孩與老師"><a href="#可悲台灣小孩與老師" class="headerlink" title="可悲台灣小孩與老師"></a>可悲台灣小孩與老師</h1><p>這則笑話之所以好笑，就是因為我們的確可悲。</p><p>我們的學生生活被考試佔滿，漸漸的讓學生也變得考試導向、勢利，只在乎「會不會考」，再也不在乎學習的本質是理解、是應用。</p><p>有時，當老師充滿熱血，希望做些什麼，帶些不一樣的課程來改變時，反而會受到學生的反彈，反而覺得老師很煩，還不如拿來考試、自習。</p><p>這樣子的反應，往往是毀了一位教師熱忱最可怕的殺手。</p><h1 id="我如何成為一位可悲的國中生？"><a href="#我如何成為一位可悲的國中生？" class="headerlink" title="我如何成為一位可悲的國中生？"></a>我如何成為一位可悲的國中生？</h1><p>一個學生，是如何變得漠不關心？</p><p>從升上國中開始說起，在國一時，我對於綜合、藝文課是高度參與的，一方面老師懂的帶學生，而且國一的課業還沒有那麼重，所以在上考試科目之餘，能夠做一些不一樣的事，我想大部分學生都是喜歡的。</p><p>到了二年級，我開始有自己課餘的活動，也就是寫程式。我在家需要大量的時間來維持我的興趣，我甚至一度考慮不參加第八節，但後來考慮怕不能跟上進度與造成別人麻煩，仍然是參加了。</p><p>從此在學校，我的目標就是「將所有學習相關的事情在學校完成」，什麼意思呢？就是將作業在學校寫完，要考的科目在上課讀完，讓回家時間百分之百都是屬於自己的。</p><p>漸漸的，我開始將一些「我認為學不到東西」的課用來寫作業、自習；漸漸的，當老師出報告作業時，心中只有反感，與麻煩；漸漸的，我開始變成自己瞧不起的那種「可悲台灣小孩」。</p><h1 id="夢中的教室"><a href="#夢中的教室" class="headerlink" title="夢中的教室"></a>夢中的教室</h1><p>我有一個夢，是一間教室，中間一個大桌，老師不站在講台上，跟同學一塊坐在桌旁。老師上課，但強調的不是如何解題目，而是為什麼我們要學這個？如何理解這門學問。學生可以自由的討論，如果願意，學生能向大家發表自己的看法，甚至自己準備內容向大家發表。</p><p>沒有正解，沒有標準答案，沒有考試技巧，沒有「這題目有瑕疵，但你還是得這樣寫」，只有學習本身。</p><blockquote><p>「這樣的教室，真希望不只是出現在夢裡。」</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;「這句話真是說到心坎裡」，我笑著說&lt;br&gt;「就只怕過幾年後，他就變『可悲台灣老師』」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一則笑話&quot;&gt;&lt;a href=&quot;#一則笑話&quot; class=&quot;headerlink&quot; title=&quot;一則笑話&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="life" scheme="https://www.wancat.cc/tags/life/"/>
    
      <category term="教育" scheme="https://www.wancat.cc/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>YaCy安裝教學</title>
    <link href="https://www.wancat.cc/2018/09/22/yacy-install/"/>
    <id>https://www.wancat.cc/2018/09/22/yacy-install/</id>
    <published>2018-09-22T12:26:23.000Z</published>
    <updated>2018-10-26T10:12:52.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://yacy.net/en/index.html" target="_blank" rel="noopener">YaCy</a>是一個開源的點對點搜尋引擎<br>本文將講解如何在 Ubuntu Server 上安裝 YaCy 搜尋引擎，並用Nginx做反向代理，將網址改成像是 yacy.example.com 的形式。</p></blockquote><p>YaCy 架好的範例可以來我架設的伺服器使用看看<a href="https://yacy.wancatserver.tk" target="_blank" rel="noopener">https://yacy.wancatserver.tk</a></p><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>本文假設有一台無圖形界面的伺服器以及有圖形界面的Desktop。Desktop必須要能夠使用瀏覽器。<br><strong>假設伺服器網域</strong>： example.com，<strong>請將本文所有example.com改成你的網域名稱</strong><br>假設使用者名稱：user ，請換成自己的使用者名稱</p><blockquote><p>如果沒有網域名稱仍然可以安裝 YaCy ，只是需要用 ip:8090 的形式來連上它。<br>如果沒有真實 ip 就只能在內網使用</p></blockquote><h2 id="伺服器安裝-Java-8"><a href="#伺服器安裝-Java-8" class="headerlink" title="伺服器安裝 Java 8"></a>伺服器安裝 Java 8</h2><p>YaCy可以使用 OpenJDK，也可以使用Oracle官方的JRE。<br>OpenJDK使用apt安裝<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt install openjdk-8-jre</span><br></pre></td></tr></table></figure></p><p>官方的JRE比較麻煩，可參考<a href="https://dotblogs.com.tw/jhsiao/archive/2013/09/03/116186.aspx" target="_blank" rel="noopener">此文章</a></p><h2 id="安裝-YaCy"><a href="#安裝-YaCy" class="headerlink" title="安裝 YaCy"></a>安裝 YaCy</h2><p>至<a href="https://yacy.net/en/index.html" target="_blank" rel="noopener">官網</a>下載程式。</p><img src="/2018/09/22/yacy-install/download.png" class="slug"><p>將程式上傳至伺服器，請將/path/to/yacy.tar.gz替換成你下載的路徑<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> scp /path/to/yacy.tar.gz user@example.com:/home/user/</span><br></pre></td></tr></table></figure></p><p>接下來以ssh登入伺服器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh user@example.com</span><br></pre></td></tr></table></figure></p><p>解壓縮，將yacy.tar.gz替換成你下載的路徑<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tar -zxvf yacy.tar.gz</span><br></pre></td></tr></table></figure></p><p>解壓縮完可以看到家目錄下多了一個目錄yacy，裡面有 startYACY.sh, stopYACY.sh, killYACY.sh, reconfigureYACY.sh, updateYACY.sh等執行檔，以及許多資料夾。</p><p>我們先去打開防火牆，YaCy使用的是 8090 port (HTTP)，以及8443 (HTTPS)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ufw allow 8090</span><br></pre></td></tr></table></figure><p>執行 startYACY.sh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ./startYACY.sh</span><br></pre></td></tr></table></figure></p><p>接著等一下，瀏覽器連 example.com:8090。</p><blockquote><p>啟動時可能需要等個一分鐘才能載入網頁，是正常的</p></blockquote><p>如果看到這個畫面，就代表執行成功<br><img src="/2018/09/22/yacy-install/page.png" class="slug"><br>可以試著用YaCy搜尋一些東西看看</p><blockquote><p>跑得慢是正常的，出來結果很少也是正常的</p></blockquote><img src="/2018/09/22/yacy-install/search_page.png" class="slug"><p>停止 YaCy<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ./stopYACY.sh</span><br></pre></td></tr></table></figure></p><p>這個指令需要等一下YaCy才會停止，可以用top來確認YaCy停止了沒。<br>等到YaCy停止後，使用reconfigure來進行設定<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ./reconfigureYACY.sh</span><br><span class="line"></span><br><span class="line">*** YaCy commandline configuration tool ***</span><br><span class="line"></span><br><span class="line">Make your choice:</span><br><span class="line">[1] change memory settings</span><br><span class="line">[2] change admin password</span><br><span class="line">[3] change HTTP port</span><br><span class="line">[4] change HTTPS port</span><br><span class="line">[0] quit</span><br></pre></td></tr></table></figure></p><p>選項分別是 設定YaCy可用記憶體大小(重要)、設定管理員密碼(重要)、設定HTTP埠口、設定HTTPS埠口，前面兩項要記得設定，後面看個人情況調整，如果沒有特殊需求，保留預設值即可。</p><h2 id="YaCy-設定"><a href="#YaCy-設定" class="headerlink" title="YaCy 設定"></a>YaCy 設定</h2><p>啟動YaCy ，打開 example.com:8090，點擊右上方的”Administration”<br><img src="/2018/09/22/yacy-install/yacy_welcome.png" class="slug"><br>會進到設定畫面<br><img src="/2018/09/22/yacy-install/yacy_status.png" class="slug"></p><p>YaCy 的進階設定會在日後別篇文章作說明。</p><h2 id="YaCy自啟動設定"><a href="#YaCy自啟動設定" class="headerlink" title="YaCy自啟動設定"></a>YaCy自啟動設定</h2><p>現在已經可以使用YaCy了，但是得要手動開啟，不免覺得麻煩，所以接下來將會把YaCy加入service中，讓系統自動開啟，並且以yacy使用者執行，避免被攻擊後危害系統。<br>建立系統使用者 yacy<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo useradd --system yacy</span><br></pre></td></tr></table></figure></p><p>把剛才在user底下的yacy資料夾搬移到yacy家目錄，並將擁有者改為yacy，這樣子YaCy資料夾就會在 /home/yacy/yacy 中。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo mv ~/yacy /home/yacy/</span><br><span class="line"><span class="meta">$</span> sudo chown -R yacy:yacy /home/yacy/yacy</span><br></pre></td></tr></table></figure></p><p>接下來要將YaCy加入系統服務中，新增/usr/lib/systemd/system/yacy.service，寫入以下內容。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /usr/lib/systemd/system/yacy.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=YaCy search server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=yacy</span><br><span class="line">ExecStart=/home/yacy/yacy/startYACY.sh</span><br><span class="line">ExecStop=/home/yacy/yacy/stopYACY.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>接著可以啟動YaCy<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl enable yacy</span><br></pre></td></tr></table></figure></p><p>這樣子YaCy就會隨著開機啟動了<br>可以用top指令觀察yacy狀態</p><p>如果之後中途需要手動關閉或啟動YaCy，使用以下指令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start yacy.service</span><br><span class="line"><span class="meta">$</span> sudo systemctl stop yacy.service</span><br></pre></td></tr></table></figure></p><p>//如果你按tab只跳出yacy，那就是了</p><h2 id="設定-Nginx-反向代理"><a href="#設定-Nginx-反向代理" class="headerlink" title="設定 Nginx 反向代理"></a>設定 Nginx 反向代理</h2><p>在做這一步之前，<strong>請先確定 yacy.example.com 可以指向你的伺服器。</strong></p><p>Nginx 安裝，使用apt<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt install nginx</span><br></pre></td></tr></table></figure></p><p>打開80埠口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ufw allow 80</span><br></pre></td></tr></table></figure></p><p>瀏覽器開啟example.com，如果有以下畫面代表正確<br><img src="/2018/09/22/yacy-install/nginx_welcome.png" class="slug"><br>編輯/etc/nginx/sites-available/default<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure></p><p>會看到裡面已經有許多設定檔，無視它們，寫一個新的server。<br><strong>注意：不要寫在原本的server內</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yacy.example.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8090 ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下來讓Nginx讀取設定檔<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo nginx -s reload</span><br></pre></td></tr></table></figure></p><p><strong>這個過程可能會發生錯誤，須按照個人情況調整</strong><br>接下來瀏覽器連到yacy.example.com，如果可以看到YaCy，則代表成功了。</p><blockquote><p>Nginx可以調整的選項很多，我只會最簡單的設定，如果了解，可以自己進行優化</p></blockquote><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>YaCy是一個高度個人化的搜尋引擎，現在的節點數量仍嫌不足，沒有辦法查到如一般搜尋引擎一樣好的資料，速度也較慢，但可以讓小型網站有個「被搜尋」的機會。<br>日後將會在別篇文章對於「如何讓自己的網頁被搜尋」，以及「建立自己的資料查詢庫」做說明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://yacy.net/en/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YaCy&lt;/a&gt;是一個開源的點對點搜尋引擎&lt;br&gt;本文將講解如何在 Ubuntu Server 上安裝 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>從今天起，不要使用 .docx</title>
    <link href="https://www.wancat.cc/2018/09/16/dont-use-docx/"/>
    <id>https://www.wancat.cc/2018/09/16/dont-use-docx/</id>
    <published>2018-09-15T21:50:26.000Z</published>
    <updated>2018-10-26T10:12:52.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>妳使用什麼文書軟體？相信大部分的答案會是 Word, Powerpoint, Excel ，微軟Office的產品。那是否可以麻煩妳做一件事？在 <strong>存檔的時候選擇用ODF</strong> 。</p></blockquote><h1 id="檔案格式的霸主-—OOXML"><a href="#檔案格式的霸主-—OOXML" class="headerlink" title="檔案格式的霸主 —OOXML"></a>檔案格式的霸主 —OOXML</h1><p>早在1993年，微軟就推出了Microsoft Office 3.0，在當時還只能使用純文字編輯的時代，這樣「所見即所得」的編輯器是一個創舉，而買軟體要付費這件事也天經地義，畢竟沒有人逼妳。</p><p>漸漸的在這二十多年，微軟Office在文書軟體中取得了霸主的地位，絕大多數的文件檔都是微軟的私有格式 —OOXML，也就是docx, pptx, xlsx等微軟Office的專用檔案格式。</p><p>OOXML雖然號稱是 <strong>「Open」</strong> ，也是一項國際標準，但是微軟總是會在新版的軟體中加入OOXML不包含的功能，導致其他office軟件，或甚至是微軟自己的舊版office，都無法正確開啟檔案。</p><p>同時微軟對於舊版office的支援也可說是毫不留情，新版的檔案在舊版皆無法開啟，變相逼迫使用者升級，但這樣也不利於須長久保存的文件（十年過後文件就打不開了）。</p><h1 id="微軟霸權"><a href="#微軟霸權" class="headerlink" title="微軟霸權"></a>微軟霸權</h1><p>由於OOXML的普及與它的封閉，漸漸的許多使用者「必須」得購買微軟Office，才得以工作、做報告，甚至是政府機關，每年都得花大量金錢購買微軟的授權，而每次的更新，都是痛苦的開始。</p><p>而國中小的電腦課卻上的是Windows系統，教的是微軟Office，一批一批出來的學生也都只會使用微軟的產品，未來想要轉換也變得更加辛苦，導致許多人最後放棄，繼續使用微軟的產品。</p><h1 id="開放檔案格式ODF"><a href="#開放檔案格式ODF" class="headerlink" title="開放檔案格式ODF"></a>開放檔案格式ODF</h1><p>這樣的問題也早早就被注意到了，在2002年，許多的公司與團體聚在一起，討論開發一項 <strong>開放</strong> 的檔案格式。在2005年5月，OpenDocument成為了國際標準，也就是現今的ODF檔（Open Document Format）。而在2012年發布ODF 1.2的更新版，至此無再更新標準。</p><p>說ODF妳可能會很陌生，其實odt, odp, ods等檔案就是ODF在不同種類文件下的副檔名。odt是文件（相當於Word），odp是簡報（相當於Powerpoint），ods是試算表（相當於Excel）。</p><p>現今幾乎所有的文書辦公軟體，都能完整支援ODF，由於ODF是開放的檔案格式，而且很少異動，所以軟體相容性做得非常好。而且可以跨平台、跨軟體支援。</p><h1 id="為什麼妳不該使用OOXML？"><a href="#為什麼妳不該使用OOXML？" class="headerlink" title="為什麼妳不該使用OOXML？"></a>為什麼妳不該使用OOXML？</h1><p>首先，OOXML對於其他軟體的支援度很差，妳可能有經驗，當妳把docx檔丟到Google drive，在上面開啟都會跑掉格式，這種感覺真的很差，妳可能會怪Google drive沒做好相容，但實際上是因為微軟在程式裡 <strong>「故意讓它不相容」</strong> 導致。</p><p>再來，如果妳像我一樣使用Linux系統，別人給妳OOXML妳會很火大，Linux沒有微軟Office，它不只逼我買Office，還連帶逼我買Windows。</p><p>最後，OOXML很喜歡包一堆沒用的東西進去，導致妳的檔案變得比較大。</p><h1 id="國際間的ODF趨勢"><a href="#國際間的ODF趨勢" class="headerlink" title="國際間的ODF趨勢"></a>國際間的ODF趨勢</h1><p>在ODF格式訂定後，許多的國家包括美國的麻省、日本、英國，都開始將ODF定為國家的標準格式。而台灣在這一塊也不馬虎。</p><p>事實上，台灣在2009年也將ODF訂為國家的文件標準，政府也開始規定，公部門之間的文件交流須使用ODF格式。此舉也有助於政府節約財源，從2008年到2014年間，政府用於購買微軟Office的支出就高達32億元，每年平均支出需要4億元。</p><p>可惜的是，許多人尚未知曉ODF格式與它的好處。</p><h1 id="該如何改變？"><a href="#該如何改變？" class="headerlink" title="該如何改變？"></a>該如何改變？</h1><p>最簡單的方法，就是從「存檔」開始，只要在存檔的選項中，選擇ODF檔，妳就邁出了離開微軟的一小步。是的，妳 <strong>不一定</strong> 要更換軟體，妳仍然可以使用順手的微軟Office，但這樣就是留給別人或未來的自己選擇的空間，當妳未來不打算繼續購買時，可以不要承受那麼大的代價。</p><p>如果妳今天已經下定決心，要離開微軟，那妳可以開始尋找替代微軟的文書軟體，在這裡我會推薦LibreOffice。</p><p>LibreOffice是一個開源軟體，意指妳可以免費的下載，更改程式碼，並再發布，使用完全不用擔心盜版的問題。</p><p>過去或許你有聽過OpenOffice，但由於複雜的原因（被Oracle併購），開發社群自行建立了一個分支（branch），開始了LibreOffice計畫。</p><p>而現在LibreOffice計畫已經超越了OpenOffice了，有較大的社群進行維護，在安全性與功能上也較OpenOffice優越，因此我會推薦直接使用LibreOffice。事實上兩者使用界面是差不多的，想要隨時更換也不是問題。</p><h1 id="我們需要讓更多人知道"><a href="#我們需要讓更多人知道" class="headerlink" title="我們需要讓更多人知道"></a>我們需要讓更多人知道</h1><p>我的媽媽是學校老師，儘管現在政府已經規定要使用ODF格式，她要工作時仍得要開啟各種OOXML文件，導致她常常跟我抱怨沒辦法在家裡的Linux系統工作。</p><p>而現今學校的電腦課教學仍是以微軟Office為主，導致學生普遍對於自由軟體、ODF等概念缺乏認識，更難在未來推動ODF。現在已經有許多學校開始推動自由軟體的教育，我們希望這樣的改變可以繼續成長下去！</p><p>我們需要讓更多人認識ODF，讓更多人知道文書處理不一定要用微軟Office！</p><p>這樣的改變，可以從妳的存檔開始，從今天起，存成ODF。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p>國家發展委員會 —推動ODF為政府文件標準格式研析報告 <a href="http://www.itc.ntnu.edu.tw/files/archive/444_932e8ff6.pdf" target="_blank" rel="noopener">http://www.itc.ntnu.edu.tw/files/archive/444_932e8ff6.pdf</a><br>IThome周峻佑 —政府機關文件新趨勢，ODF成為主要通用格式 <a href="https://www.ithome.com.tw/article/117301" target="_blank" rel="noopener">https://www.ithome.com.tw/article/117301</a><br>維基百科 —開放文檔格式 <a href="https://zh.wikipedia.org/wiki/开放文档格式" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/开放文档格式</a><br>維基百科 —Microsoft Office <a href="https://zh.wikipedia.org/zh-tw/Microsoft_Office#Excel" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-tw/Microsoft_Office#Excel</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;妳使用什麼文書軟體？相信大部分的答案會是 Word, Powerpoint, Excel ，微軟Office的產品。那是否可以麻煩妳做一件事？在 &lt;strong&gt;存檔的時候選擇用ODF&lt;/strong&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 暑假回顧</title>
    <link href="https://www.wancat.cc/2018/08/29/summer-vacation/"/>
    <id>https://www.wancat.cc/2018/08/29/summer-vacation/</id>
    <published>2018-08-28T23:15:01.000Z</published>
    <updated>2018-08-28T23:20:39.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="兩個月-的暑假，到底幹了些什麼？"><a href="#兩個月-的暑假，到底幹了些什麼？" class="headerlink" title="兩個月(?)的暑假，到底幹了些什麼？"></a>兩個月(?)的暑假，到底幹了些什麼？</h2><p>從七月結束之時，我就開始有了「這個暑假什麼都沒做」的恐懼。明明每一天都過得很充實，但努力回想，卻想不出自己完成些什麼。</p><p>為了幫助我的回想，我要來將它寫成一篇文章，來避免我忘記，同時也是紀念一下今年的暑假。</p><h2 id="日常的規劃"><a href="#日常的規劃" class="headerlink" title="日常的規劃"></a>日常的規劃</h2><p>講到這個，我在暑假開始之前，就很興奮的開始規劃一天中的時間表。幫各項活動標上百分比，仔細的計算所需花用的時間。</p><h3 id="規劃圖"><a href="#規劃圖" class="headerlink" title="規劃圖"></a>規劃圖</h3><ul><li>讀書: 30</li><li>寫程式: 20</li><li>玩樂: 30</li><li>swap: 20</li><li>每日五點起床</li></ul><p>畢竟要國三了，每天讀一下複習講義是必須的。<br>五點起床是我現在的生活作息，我在之前的<a href="/2018/06/18/21earlyday/">一篇文章</a>曾經說明過早起的各種好處，有興趣可以去看看。</p><p>每個大項例如寫程式，還有各個小項。那swap代表著空閒的，自由運用的時間。<br>所以照這個時間表，讀書每天大約四小時，寫程式三小時，玩樂四小時。<br><strong><em>但我還是沒有做到</em></strong></p><h3 id="真正ㄉ情形"><a href="#真正ㄉ情形" class="headerlink" title="真正ㄉ情形"></a>真正ㄉ情形</h3><h4 id="讀書"><a href="#讀書" class="headerlink" title="讀書"></a>讀書</h4><p>暑假第一天，我非常確實的唸了四個小時的書，八科都念。然後唸完真的是呈虛脫狀態，沒有想到會這麼累，接下來只想玩樂了。<del>可見平常在學校有五成都在放空。</del><br>再來出乎意料的是，被雜事浪費了許多時間，不同活動的交換之時，常常拖太久，結果時間沒有想像的多。</p><p>於是第二天，我就只讀了兩個半小時。</p><p>但是我發現，要完成一週的複習講義<strong>不需要每一科一天半小時</strong>，不需要，可能只要一天 15~20 分鐘足矣，結果每天讀書的時間越來越短，但還是都有準時完成複習講義。</p><p>原先我是採用時間分配，也就是設定每科一天的時數。後來發現這樣不行，一方面花的時間太高，再來每科的時間比重其實不太均衡。像是數學就需要花比較久，而社會科通常比較快。</p><p>於是我改成採進度分配，每天開始讀之前，先翻一下今天需要寫到哪裡，完成自己分配的進度就換下一科。</p><h4 id="寫程式"><a href="#寫程式" class="headerlink" title="寫程式"></a>寫程式</h4><p>暑假前兩週我非常認真的在寫<strong>圖書管理系統</strong>，這個Project我從五月開始做，<strong>第一次寫web</strong>、第一次寫Javascript、第一次寫Node.js。</p><p>我每天有寫程式，但我卻沒有辦法寫<strong>三小時</strong>。寫程式當然會累，或許因為以前都是利用晚上的零碎時間寫，不會有這種「時間太多」的問題，到了暑假，我才發現我的<strong>行程安排與計畫執行非常的爛</strong>。</p><blockquote><p><em>在過慣了平常被安排好的生活，當現在終於可以自己安排時，反而不知道該怎麼做了。</em></p></blockquote><h4 id="玩樂"><a href="#玩樂" class="headerlink" title="玩樂"></a>玩樂</h4><p>玩樂大概是執行的最精確的(喂)，我玩的遊戲只有Minecraft，從今年一月開始，我就和幾個朋友以及我姐一起經營一個世界 —OurLiveWorld，之前也有寫一篇 <a href="/2018/06/10/長征-尋找沙漠之旅-1/">文章</a> 來講其中遇到的小故事。</p><p>暑假的期間，我們的進度終於要去討伐終界龍啦！但我的主要戰力 —Ken 平常在家玩電腦只想打LOL，不想玩Minecraft，於是前兩週我幾乎都只有和我姐Andrea經營世界，挖挖礦、蓋一些基礎建設、四處探險。</p><p>到了一個週末時Ken來我家玩，我們才出發去討伐終界龍。這個故事有點長，以後有機會再說明。</p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>從暑假第二周，我開始準備JSP的演講，但一開始準備的速度很慢，就只是寫稿、寫稿、再寫稿，也沒有每天寫，到了第三週開始有危機意識了，才開始每天趕稿。<br>詳細JSP的紀錄可以來看我的<a href="/2018/08/06/jsp8/">2018 JSP 紀錄與心得</a></p><p>八月第一周每天去準備演講、練口說，到了星期五出發去JSP。</p><p>三天結束後，回來開始剪影片，花了三天時間完成。<br>影片剪完就開始寫心得，一樣是斷斷續續，但不知不覺也寫了4000字</p><p>現在想想，JSP應該是今年暑假最主要的活動了。</p><h2 id="暑輔"><a href="#暑輔" class="headerlink" title="暑輔"></a>暑輔</h2><p>從暑假的第四周開始暑輔，在二年級的時候我非常叛逆的<strong>不參加暑輔</strong>，不參加暑輔在幹嘛呢？寫程式，做自己的計畫，準備JSP。</p><p>現在要升上三年級，知道自己一定得上暑輔，不然會缺一堆考試和課，就只得乖乖的去。</p><p>暑輔期間我的安排是，上午上課，下午則和Ken在我家讀書，讀書兩小時後來玩Minecraft。在接近JSP的時候則是在讀完書後準備JSP。</p><p>暑輔期間大概是Minecraft玩的最兇的時候，一方面Ken在我家，我去工作怕他無聊，再來上午上課下午讀書，接下來的工作效率也不好，所以我把工作時間都安排到五點起床到七點上課之間，活力正佳的時候。</p><h2 id="伺服器"><a href="#伺服器" class="headerlink" title="伺服器"></a>伺服器</h2><p>在我的工作項目中，有一大項就是<strong>管理我的伺服器</strong>啦！<br>在今年，我將我家的舊Dell桌機給改裝成伺服器，灌上了Ubuntu 18.04 Server，原先是將它灌Lubuntu，給我爸當文書機用，但因為他不常使用（都用他的Lubuntu 筆電），所以我就把它給拿來當server了。</p><h3 id="Minecraft"><a href="#Minecraft" class="headerlink" title="Minecraft"></a>Minecraft</h3><p>server的主要需求就是玩minecraft，我開服都是自己架，以前用Aternos，但因為要排隊所以一直找替代，後來學會架服，就用自己的筆電，但沒辦法通外網，而且會讓筆電容易當。</p><p>我的server雖然不強，是七年前的電腦，只有二核心的AMD，但至少minecraft的伺服器跑得動，只是騎馬或飛行時會容易破圖。</p><p>為了這個我也一直在找替代的server，一開始找到商用伺服器，又考慮要自組，後來聽朋友介紹去看<a href="https://zh.wikipedia.org/zh-tw/%E6%A0%91%E8%8E%93%E6%B4%BE" target="_blank" rel="noopener">樹梅派</a>。</p><p>雖然看了很多，也有些是真的不錯的，不過一直沒買，因為不確定自己的需求有多高，以及之後這個網站能經營多久，如果我升高中了，還有時間來處理嗎？</p><p>於是這台舊舊Dell就這樣一直用下去，跑得不怎麼樣，但也沒出什麼問題，Minecraft後來改用<a href="https://www.spigotmc.org/" target="_blank" rel="noopener">Spigot</a>（一個Minecraft伺服器軟體）來跑就順暢了不少。</p><h3 id="網站"><a href="#網站" class="headerlink" title="網站"></a>網站</h3><p>我的部落格換過很多次，從最初的痞客邦，到後來Logdown，到後來用Medium，最後用Hexo自架。<br>痞客邦是不喜歡廣告，Logdown做的難用(無法用Firefox)、圖片量限制，Medium不能用Markdown，後來找到Octopress，一路查查查就查到現在用的<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>了。</p><p>Hexo 是一個將你的 Markdown 原始碼轉換成網頁html的工具，其中還有佈景、分類的功能，輸出後的檔案可以直接部屬到Github Page或任何的靜態網頁伺服器。</p><p>我喜歡讓自己的文章原始碼存在自己的電腦，我喜歡Markdown，我喜歡Git，我喜歡自己架站，我喜歡用開源軟體，我喜歡台灣製造，所以我無畏麻煩的自己來學習，現在你所看到的部落格就是使用Hexo所建立的。</p><h3 id="網域"><a href="#網域" class="headerlink" title="網域"></a>網域</h3><p>如果你是從我的伺服器(<a href="http://wancatserver.tk" target="_blank" rel="noopener">http://wancatserver.tk</a>) 連進來的，而非直接連Github Page  ( <a href="https://wancatserver.github.io" target="_blank" rel="noopener">https://wancatserver.github.io</a>) ，這個網域是我最近申請的，網頁則是用反向代理Github Page處理。</p><p>我最早伺服器是用浮動IP + DDNS（動態域名系統），把伺服器放內網，在路由器設定由伺服器代表真實IP，再用<a href="https://www.no-ip.com" target="_blank" rel="noopener">no-ip</a>的DDNS服務來取得域名。</p><p>這樣跑其實也可以，只是網址又臭又長…而且會被FB封印（被認定為不安全連結）。<br>後來我的朋友教我將中華電信的ADSL改成用1個固定+7個浮動，才讓我的伺服器得到了固定IP啦！</p><p>有固定IP就可以申請網域了。比較好看的網域，像是 tw, com這種是要錢的，而且是年租，不能買斷。我想自己只是玩玩性質的，不需要去租這麼好。</p><p>於是同樣聽我朋友的，到Freenom去申請免費的網域，我選的是 .tk，還可以啦！至少很短很簡潔，比原本的ddns.net好多了，而且不會被FB封鎖。</p><h3 id="Yacy搜尋引擎"><a href="#Yacy搜尋引擎" class="headerlink" title="Yacy搜尋引擎"></a>Yacy搜尋引擎</h3><p>在我過去的文章中，曾經有一篇講關於<a href="https://medium.com/lancatserver/%E6%88%91%E6%8F%9B%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E4%BA%86-duckduckgo-and-yacy-dd86e3f299d" target="_blank" rel="noopener">搜尋引擎</a>的，我現在<br>基本上不用Google了，除了不想被追蹤外，也不想壯大它的惡勢力。主要都是使用<a href="https://duckduckgo.com" target="_blank" rel="noopener">duckduckgo</a>。</p><p>但在我心目中，最理想的搜尋引擎仍是<strong>點對點</strong>、<strong>自由</strong>的搜尋引擎。而這個搜尋引擎已經存在，它就是<a href="https://yacy.net/en/index.html" target="_blank" rel="noopener">YaCy</a>。</p><p>但使用YaCy，需要在自己的電腦上啟動YaCy，除了佔資源外，每次都需要開啟也不方便，而且<strong>手機不能用</strong>，所以我就想在伺服器上架一個<strong>公共YaCy</strong>，讓我、我的家人，甚至是其他人都可以使用YaCy搜尋引擎，而不用先安裝。</p><p>七月出的時候，有曾經試著去弄過，但怎麼弄都不能連上，也沒有報錯，搞的好生氣。八月底時，再去試一次，本來想要改成用<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8C%85%E8%A3%85%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">PPA</a>安裝，但是YaCy的憑證似乎太久沒更新還是怎樣，sudo apt update一直不通過，弄的心浮氣躁。</p><p>我不信邪，再去直接執行下載的YaCy，只是這次改用root執行，結果就成功了…<br><strong><em>喂!</em></strong></p><p>伺服器跑YaCy有點吃力，因為YaCy需要去爬網站資料以及連到其他的YaCy節點，但先不管，能用就好。<br>再來就是幫YaCy弄一個 <a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">sub domain</a>，讓我的YaCy頁面可以變成 yacy.wancatserver.tk 。在請教我朋友後，決定使用 <a href="https://zh.wikipedia.org/zh-tw/Nginx" target="_blank" rel="noopener">Nginx</a> 來做反向代理。之前沒有Nginx的基礎，花了些時間學習，但還是弄好了。</p><p>因此，現在可以連到 <a href="http://yacy.wancatserver.tk" target="_blank" rel="noopener">http://yacy.wancatserver.tk</a> 來使用我的YaCy搜尋引擎囉！<br>//我的伺服器有時候可能會關機，不保證能夠連通<br>//目前還沒有做https，所以會是不安全的連線，請自行斟酌使用<br>//伺服器它跑得有點慢，請耐心的等它，先去做別的事</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>暑假也真的要過完了，每次到了這天都感到不可思議，難以想像兩個月這麼快就結束了。接下來國三的生活是沒法像現在一般悠哉了，其實從暑輔就有嗅出未來成天考試的生活。幫自己設了許多目標，學期中無法完成的，就留到暑假；暑假中沒法完成的，就留給未來。</p><p>每次到了這天都覺得自己什麼也沒做，虛度了兩個月，為了讓未來的自己記得這個暑假發生的事，我寫下這篇文章。</p><blockquote><p>以此紀念，國二最後的囈語。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;兩個月-的暑假，到底幹了些什麼？&quot;&gt;&lt;a href=&quot;#兩個月-的暑假，到底幹了些什麼？&quot; class=&quot;headerlink&quot; title=&quot;兩個月(?)的暑假，到底幹了些什麼？&quot;&gt;&lt;/a&gt;兩個月(?)的暑假，到底幹了些什麼？&lt;/h2&gt;&lt;p&gt;從七月結束之時，我就
      
    
    </summary>
    
    
      <category term="life" scheme="https://www.wancat.cc/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2018 JSP 紀錄與心得 (二)</title>
    <link href="https://www.wancat.cc/2018/08/23/jsp8-2/"/>
    <id>https://www.wancat.cc/2018/08/23/jsp8-2/</id>
    <published>2018-08-23T09:43:06.000Z</published>
    <updated>2018-12-01T06:06:20.192Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>參加 <strong>JSP 國中科學探究聯合發表會</strong> 的所見所得。事前的準備，到結束後的回味，新的故事，至今仍持續發生。<br>本次主題的<a href="/2018/08/01/FireWheel0/">系列文章</a>, <a href="https://www.youtube.com/embed/j0jkjbXKWTg" target="_blank" rel="noopener">演講影片</a></p></blockquote><h2 id="老街解謎"><a href="#老街解謎" class="headerlink" title="老街解謎"></a>老街解謎</h2><p>在看了海報發表以及趣味課程後，我們在下午四點即將出發到大溪老街，進行<strong>大溪老街實境解謎</strong>，要在大溪老街中，找出各個謎題的答案。我將網站的連結放<a href="https://holiyo.tn.edu.tw/game/game_platform/edit/play.jsp?id=9f79e8bc&amp;data=a00001010.2-b9f2b7625247ed3c8b4dfdb1e8b008d7.8-5e3365323f06ad325551e70716d2a77f.2-846a8cf583fd4d26f212368d944eabc5.1-07b1f5df63bf04e1a10afadf525e6153.4-0cc0d3284567a8066ed2e1c4d10a7960.2-029d7c7b554c7a3bf9b869764ae19403&amp;fe=nnnnnnnnnnnnnnnn&amp;title=%E8%80%81%E8%A1%97%E8%A7%A3%E8%AC%8E&amp;time=1532694743885" target="_blank" rel="noopener">這邊</a><br>（抱怨一下，這個網站沒辦法用Firefox開啟！！害我用了55 mb下載 chromium）</p><p>裡面的每一題都十分困難，需要實際到老街裡面走，而且不太可能用搜尋引擎得到答案。</p><p>我一開始是非常熱血的，在前往的路途上就開始研究地圖，根據主辦老師給的地圖，我發現一些可疑之處，並且開始計畫一個攻克路線。<br>結果到了現場，我們的隊輔表示已經跟友隊串通好要一起破解，我就失去動力了，有時候自己快解出來了卻「被」公佈答案，真的是最掃興的事。</p><p>直到我發現，<strong>答案都在網頁裡</strong>。</p><h2 id="熱血駭客魂"><a href="#熱血駭客魂" class="headerlink" title="熱血駭客魂"></a>熱血駭客魂</h2><p>事情是這樣的，原先我以為答案在伺服器中，客戶端將輸入的答案傳送給伺服器核對，伺服器再回傳是否正確。但是我關了網路，卻仍然可以知道答案是否正確，證明了「答案」一定被紀錄在網頁的某個角落。</p><p>哇！發現這個之後不得了，我立刻跟我的工程師朋友講這件事，就用手機想來看原始碼，手機打不開，於是就出動了我隨身攜帶的筆電。</p><p>我和我朋友的熱血駭客魂立刻爆發了，我們雖然無法自己找出答案，但可以<strong>追求屬於我們的勝利</strong>。原本我想答案應該會被隨便擺在某個陣列或是物件中，於是就根據前面所得到的答案內容下去搜尋，應該就能找到擺放答案的陣列。結果不然，什麼都沒查到。我們繼續嘗試用各種關鍵字，像是「答案」、「answer」、「第六題」等等，仍然一無所獲。</p><p>看來設計網頁的人有想刻意隱藏這個答案，沒辦法那麼容易破解。</p><p>我們開始一行一行慢慢看原始碼，有時候看到關鍵字搜尋，我們兩個都對Javascript(撰寫網頁程式的程式語言)不太擅長，因此看的有些吃力。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/md5.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>當我們看到這一行的時候，我朋友突然大叫。</p><blockquote><p>天啊！它竟然用MD5!這下解不開了。</p></blockquote><p>我不知道MD5是什麼，朋友解釋說，<a href="https://zh.wikipedia.org/zh-tw/MD5" target="_blank" rel="noopener">MD5</a>是一種<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">密碼雜湊函式</a>，簡單來說，可以將一個資料轉換為一段暗碼，但你難以透過暗碼去推回原先的資料，也就是<strong>單向函式</strong>。</p><p>那要如何利用MD5? 以這個網頁為例，假設答案是「地瓜」（我絕對沒有要劇透的意思），那網站就先將「地瓜」用MD5加密成一段暗碼，然後把暗碼放到網頁裡面。<br>當使用者輸入答案時，網頁的程式將會將輸入的答案用MD5加密，然後比對<strong>加密的結果跟原先放在網站裡的暗碼是否一致</strong>，如果一致則代表使用者輸入的答案是正確的。</p><p>在證得了這個網頁使用MD5來防止破解後，我們就放棄透過看原始碼來取得答案了。雖然破解失敗了，但是這個破解的過程，或者說跟朋友一起破解的過程，卻是我從未體驗過的。</p><h2 id="撩妹…不，我們撩-Object"><a href="#撩妹…不，我們撩-Object" class="headerlink" title="撩妹…不，我們撩 Object"></a>撩妹…不，我們撩 Object</h2><p>話說JSP最刺激而瘋狂的活動就是<strong>「隱藏任務」</strong>啦！第二天的晚上你別想睡覺，有著最困難的任務要和你的組員一起完成。我們去年在福科的隱藏任務是<strong>「開店計畫」</strong>，我們從下午到夜市探勘，到晚上在體育館內討論，我還負責了影片的製作，結果竟然到了半夜三點才睡覺，而且隔天六點就得起來。</p><p>隱藏任務雖然辛苦，但非常好玩，在去年的最後一天發表會上，所有人都非常熱烈，台上與台下在熱絡的<del>嘴炮</del>討論。最吵的莫過於我們學校的學生了，每個人好像都不怕生，對台上的講者有一堆意見，這可歸功於我們科研社老師平日的「教育有方」。</p><p>而今年的隱藏任務是什麼呢？<strong>「科學幽默Slogan」</strong>（這是我自己的取名啦），看中最近蔚為流行的「撩妹語錄」、「負能量語錄」，今年的隱藏任務就是要來想跟科學相關的各種Slogan啦！</p><p>那我們這組想了什麼呢？我們一開始就打算反骨到底，撩「妹」太嫩啦！我們來撩弟，但一群雄性動物不知道該怎麼撩自己；再來是使用的語詞，我們絞盡腦汁，還是想不出什麼可以用來騷擾同性的詞彙。</p><p>於是有人說不要針對性別啦！都撩好嗎？都撩。咦？那就變成「撩People語錄」了？<br>這時，我朋友突然用他的工程師專業說了句：</p><blockquote><p>「不然『撩Object語錄』？」</p></blockquote><p>其他人都愣在那裡，只有我當場笑倒。</p><p>跟大家解釋一下，Object 物件，是在程式設計中的一個概念，在物件導向程式設計中，認為程式是由各種「物件」所組成的，而通常這些物件的最高Parent物件就是<strong>Object</strong>，所以「撩Object」，根據<a href="https://zh.wikipedia.org/zh-tw/%E5%A4%9A%E5%9E%8B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener">多型</a>)的原則，就是撩了所有的宇宙萬物了。</p><p>// <em>在我的<a href="https://lancatlin.github.io/2018/08/01/FireWheel0/#%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E5%9F%BA%E7%A4%8E" target="_blank" rel="noopener">文章</a>中有講解簡單的物件導向觀念，有興趣的朋友可以去看看。物件導向的細節很多，如果想知道更深入的可能要自己去查囉！</em></p><h3 id="畢達哥拉斯"><a href="#畢達哥拉斯" class="headerlink" title="畢達哥拉斯"></a>畢達哥拉斯</h3><p>那既然確定要「撩Object語錄」了，那也不用在乎受眾是誰，我們開始想各個科學家的撩Object語錄。<br>幸好強者我朋友，平日都在看一些<del>怪怪的</del>書，科學素養很高，認識許多<em>科學家和他們的產地</em>。我們常使用一種比較艱澀的鋪梗法，是將科學家本來自己的理論，為了撩Object而故意弄成錯的，例如我自己很喜歡的一則:</p><blockquote><p>畢達哥拉斯: 「你是唯一的無理數」</p></blockquote><p>還是稍微解釋一下，畢達哥拉斯的教派（他有一幫的弟子）有一個思想，是對「比例」的追求，他們相信所有的數字都可以用 <strong>“a/b”</strong> 這樣來表示，然而當他的一位弟子證明了正方形的斜邊長，也就是√2是個<a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%90%86%E6%95%B8" target="_blank" rel="noopener">無理數</a>時，他弟子就「溺死」了，我是說被溺死了。</p><h3 id="伽利略"><a href="#伽利略" class="headerlink" title="伽利略"></a>伽利略</h3><p>再舉一個比較熟知的例子，伽利略應該很多人都熟悉。</p><blockquote><p>伽利略: 「我想和你一起掉下去」</p></blockquote><p>伽利略是推翻過去亞里斯多德「越重東西掉落速度越快」理論的人，在他著名的<a href="https://zh.wikipedia.org/zh-tw/%E4%BC%BD%E5%88%A9%E7%95%A5%C2%B7%E4%BC%BD%E5%88%A9%E8%8E%B1#%E8%B3%AA%E9%87%8F%E7%9B%B8%E7%95%B0%E8%80%85%E5%90%8C%E6%99%82%E8%90%BD%E5%9C%B0" target="_blank" rel="noopener">比薩斜塔實驗</a>中，他將兩顆材質相同但質量不同的球體，從比薩斜塔上往下丟，證明物體的掉落速度與質量無關。</p><p>所以「和你一起掉下去」，我們就永遠不分開啦！</p><h3 id="完整的內容"><a href="#完整的內容" class="headerlink" title="完整的內容"></a>完整的內容</h3><img src="/2018/08/23/jsp8-2/img1.png" class="slug"><img src="/2018/08/23/jsp8-2/img2.png" class="slug"><img src="/2018/08/23/jsp8-2/img3.png" class="slug"><img src="/2018/08/23/jsp8-2/img4.png" class="slug"><img src="/2018/08/23/jsp8-2/img5.png" class="slug"><img src="/2018/08/23/jsp8-2/img6.png" class="slug"><img src="/2018/08/23/jsp8-2/img7.png" class="slug"><p>這張做一個小註解，它是我們的另一位組員想的，唯一不是我們這兩個阿宅想的內容。非常令人驚訝的是，在發表會上，這是最成功的一則。</p><h4 id="現場的老師還加了一個附註-此事-式-不存在"><a href="#現場的老師還加了一個附註-此事-式-不存在" class="headerlink" title="現場的老師還加了一個附註: 此事(式)不存在"></a>現場的老師還加了一個附註: <strong>此事(式)不存在</strong></h4><hr><img src="/2018/08/23/jsp8-2/img8.png" class="slug"><img src="/2018/08/23/jsp8-2/img9.png" class="slug"><p>//<strong>說好的去中心化呢？</strong></p><hr><img src="/2018/08/23/jsp8-2/img10.png" class="slug"><img src="/2018/08/23/jsp8-2/img11.png" class="slug"><p>後來也有想到用:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">love</span> <span class="params">( you )</span> </span>&#123;</span><br><span class="line">    love(you);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>以上，就是今年JSP的紀實啦！<br>今年最大的收穫，莫過於捕獲了一名野生工程師，從小六開始自己玩Scratch，到現在一路走來都是孤獨的，有時候真的會懷疑，自己寫的程式會不會其實很爛，但從來都沒有可以比較或互相學習的對象。</p><p>在離開會場之前，我們留下彼此的四五個聯絡方式（確保萬一），還約好了一起來做火輪手槍的網頁版！現在已經開始研發。</p><p>仔細回想，JSP或許是我這個暑假最值得留戀的回憶，從一開始準備的兩個禮拜，到事後寫文章的現在，不停努力的目標。<br>我一直很害怕自己會過一個虛無飄渺的暑假，擔心當暑假即將到達盡頭，自己卻什麼都沒留下。</p><p>而現在我終於可以確定，因為JSP，這個暑假，我不會忘記。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;參加 &lt;strong&gt;JSP 國中科學探究聯合發表會&lt;/strong&gt; 的所見所得。事前的準備，到結束後的回味，新的故事，至今仍持續發生。&lt;br&gt;本次主題的&lt;a href=&quot;/2018/08/01/FireWheel0/&quot;&gt;系列文章&lt;/a&gt;, &lt;a
      
    
    </summary>
    
      <category term="jsp" scheme="https://www.wancat.cc/categories/jsp/"/>
    
    
      <category term="life" scheme="https://www.wancat.cc/tags/life/"/>
    
      <category term="jsp" scheme="https://www.wancat.cc/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>2018 JSP 紀錄與心得 (一)</title>
    <link href="https://www.wancat.cc/2018/08/06/jsp8/"/>
    <id>https://www.wancat.cc/2018/08/06/jsp8/</id>
    <published>2018-08-06T12:00:00.000Z</published>
    <updated>2018-08-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>參加 <strong>JSP 國中科學探究聯合發表會</strong> 的所見所得。事前的準備，到結束後的回味，新的故事，至今仍持續發生。<br>本次主題的<a href="/2018/08/01/FireWheel0/">系列文章</a>, <a href="https://www.youtube.com/embed/j0jkjbXKWTg" target="_blank" rel="noopener">演講影片</a></p></blockquote><h2 id="JSP-簡介"><a href="#JSP-簡介" class="headerlink" title="JSP 簡介"></a>JSP 簡介</h2><p>今年很高興又參加了JSP，自從去年在我的學校 —福科國中舉辦後，就深深愛上了這個活動。<br>JSP的全名為 <a href="https://sites.google.com/site/juniorscientistparty/guan-yu-wo-men/home" target="_blank" rel="noopener"><strong>國中科學探究聯合發表會</strong></a> ， <em>Junior Scientist Party</em> ，是一個非比賽導向，純粹讓學生進行交流與交朋友的科學派對。<br>每一位參加的學生，都必須準備一點功課，可能是將你的研究成果做成一張海報，與觀眾們互動；抑或是準備一項科學課程，帶著學員們一起做；或者是在大會議廳中向所有人發表你的研究成果。<br>不管是哪一種都不簡單，所以參與的學生個個是有行動力、勇敢且努力的人，花了很多時間準備，才能來到這裡的。<br>而來到了JSP，也並非是跟同校的在一起，所有的學生會被打散到各個小組中，能因此認識不同的人，建立新的人脈。</p><p>去年我曾經參加，深受感動，因此今年，我仍在這裡。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>如前面所說，需要準備一個發表的項目。去年我是做海報分享，介紹我自製的Arduino紅外線遙控車。那今年我要挑戰更大的項目，就是在百人會議廳前進行專題發表。</p><p>題材呢？我在今年參加台中市的科展，是製作單感測器循線車，可能是科展講到會怕了，不太想要講這個題材。另外一個就是在比科展的同時，自己在製作的遊戲專案 — <strong>FireWheel火輪手槍</strong>，一方面較有趣、新鮮，二來老師也認為資訊領域是JSP較少見的題材。從暑假的第二周開始，我就在準備這場演講。<br><a href="/2018/08/01/FireWheel0/">講稿連結</a><br>我寫了非常多的內容，雖然要講的只有遊戲中的「碰撞檢測」與「三角函數」，這兩個有點偏數學的項目，但是一寫不得了，每天都寫了超越千字（打字太快了），結果到所有內容寫畢，才發現已經14000字元了，根本不可能在10分鐘的報告中講完。</p><p>這時老師也給了一個方向大轉彎，突然要我放多一點的<strong>歷程</strong>，像是怎麼學習程式的，途中遇到的困難等等，但隔天就要在學校進行試講，實在來不及，也不知該怎麼改。到了星期一在學校對著老師同學試講時，整整講了<strong>37分鐘</strong>，是限定時間的<strong>將近4倍</strong>。在最前面找同學上來試玩的地方，讓場面變得很歡樂，老師也說我臉上出現了「興奮」的神情，但在後面講的越來越久時，興奮的表情開始慢慢的黯淡。</p><p>在星期一的試講結束後，老師給了很多建議，最多還是要「刪」，刪是很正常的，在做科展的報告時我就了解，反正我還有部落格，沒法在口說講完的內容，就放在部落格給有興趣的看就好。最後一路刪刪刪，刪到只剩遊戲簡介、試玩、架構以及圓形對圓形的碰撞檢測。<br>星期二時我帶著麥克風、筆電，一個人到教室開始練習口說，一次一次試，逐漸可以把時間控制在15分鐘內，且慢慢可以不用看稿，對於我的投影片也更加熟悉，知道該在什麼時候翻頁、什麼時候用手去指。花了一個多小時練了四次，偶爾加強班下課還會有人路過來看。<br>在星期三的驗收，老師表示我已經足夠熟練，剩下的就是要看臨場反應，以及<strong>一定要找人試玩</strong>，我自己也發現試玩對於整個報告會有不同於我自己玩的「笑果」，讓報告變得活潑，讓觀眾產生興趣。</p><p>這次的所有圖片，包括投影片底圖都是我自己設計的，一開始要畫碰撞檢測的示意圖，調出了非常可愛的粉紅色以及粉綠色，就決定以此作為這次報告的主題色彩。</p><h2 id="同為天涯程式人"><a href="#同為天涯程式人" class="headerlink" title="同為天涯程式人"></a>同為天涯程式人</h2><p>當JSP開始，我們在一個禮堂要進行分組，分組基本上是隨便亂分啦！唯一的規則就是不要跟同校的一組。(我也沒有同校的)</p><p>特別的是，我們的組裡有一位組員也會寫程式，竟然也玩Linux作業系統，是我人生中第一次遇到同年齡也會玩Linux的(我也是他第一次遇到有人用Linux的，可見Linux的市占率…)。</p><p>我們一下就聊起來了，我發現他懂的非常多。關於我很缺乏的電腦底層知識，資訊領域的各種知識，還有科學，他幾乎都知道。有時候還會知道一些很奇怪的冷知識，像是Unicode裡面的編碼，令人會心一笑。</p><p>我們也彼此分享了所做的專案，像我的 圖書管理系統、<a href="https://github.com/lancatlin/FireWheel" target="_blank" rel="noopener">火輪手槍</a>，他做了一個<a href="https://github.com/TNPLR/OHCS" target="_blank" rel="noopener">加密系統</a>、現在正在做作業系統。</p><h2 id="專題演講"><a href="#專題演講" class="headerlink" title="專題演講"></a>專題演講</h2><p>在第二天的早上，就是專題演講的時候。<br>記得從小學六年級的時候，我就常常成為團隊中的發表者，對於「上台」這件事，從一開始的害怕、忐忑，到後來可以面無懼色的在台上講話，甚至對於表現開始有種興奮，開始期待，並且恨不得自己第一個上場。  </p><h3 id="科研社ㄉ特別訓練"><a href="#科研社ㄉ特別訓練" class="headerlink" title="科研社ㄉ特別訓練"></a>科研社ㄉ特別訓練</h3><p>我的「台風」，絕不是什麼演講比賽、即席演說所訓練的，而是科研社。<br>在科研社的兩年給了我很多時間去學習「如何發表」。我想我們學校的科研社應該跟其他學校有很大的不同，我們不常做實驗，相對的，我們不停的<strong>交流</strong>。我們常常分享彼此的想法，常常上台發表，常常把報告拖到最後一天才做。</p><p>對我而言，在科研社學到的不是科學知識，而是<strong>做研究的方法</strong>。或許你不會因此變得對某個領域非常的精熟，但你會知道如何讓自己成為那樣的人。</p><hr><p>在經過了前面的四組後，終於輪到了我。</p><p>我早已把筆電準備在前面，這次很堅持的使用了自己的筆電，自己設計簡報，自己設計底圖，一人團隊有些辛苦，但我的成果讓我很滿意。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/j0jkjbXKWTg" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>這次的演講算是出奇的成功。首先我很擅長問答，因此我往往更擅長應變實際的情況，還有就是事前的準備，這次我的指導老師很精準的預期了觀眾的反應，因此採用最低強度的演講，成功的讓所有人都感到興趣且聽的懂。</p><p>很開心的是觀眾反應非常熱烈，在報告的一開始，有安排找觀眾試玩的橋段，<br>原本還有些擔心會不會沒人願意上來，還好在 <del>我事先的布局</del> 觀眾熱烈的反應下，這個擔心不成問題，事實上還有三位觀眾願意上台呢！</p><p>最後有些時間不足，因此在程式解說之處稍微草率，但還好有時間讓我好好講結論。</p><p>在這邊我想謝謝每一位聽我演講的觀眾，我相信，一個好的演講，是需要講者與觀眾一同參與的，謝謝你們作了一個稱職的觀眾，讓我有一個好的舞台。也謝謝願意鼓起勇氣上台試玩的朋友，讓我們能一起完成一場好的演講。<br><strong><em>請大家一定要去看影片喔！</em></strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;參加 &lt;strong&gt;JSP 國中科學探究聯合發表會&lt;/strong&gt; 的所見所得。事前的準備，到結束後的回味，新的故事，至今仍持續發生。&lt;br&gt;本次主題的&lt;a href=&quot;/2018/08/01/FireWheel0/&quot;&gt;系列文章&lt;/a&gt;, &lt;a
      
    
    </summary>
    
      <category term="jsp" scheme="https://www.wancat.cc/categories/jsp/"/>
    
    
      <category term="life" scheme="https://www.wancat.cc/tags/life/"/>
    
      <category term="jsp" scheme="https://www.wancat.cc/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>移動 三角函數 FireWheel火輪手槍(三)</title>
    <link href="https://www.wancat.cc/2018/08/02/FireWheel3/"/>
    <id>https://www.wancat.cc/2018/08/02/FireWheel3/</id>
    <published>2018-08-01T22:16:09.000Z</published>
    <updated>2018-08-01T22:33:57.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Move-Your-Body-—三角函數"><a href="#Move-Your-Body-—三角函數" class="headerlink" title="Move Your Body!! —三角函數"></a>Move Your Body!! —三角函數</h1><p>在遊戲中，各個角色例如玩家、怪物，都需要<strong>移動</strong>，如果是水平或垂直移動，那很容易，只要增減x, y座標即可達成；但如果今天要移動的方向並非0, 90, 45度，而是60度呢？</p><p>或者，該如何找到朝向一個座標的<strong>方向</strong>？讓物件能夠行走到指定的位置。甚至是將座標旋轉，製造出可以旋轉的多邊形。</p><p>這些，都需要利用<strong>三角函數</strong>。</p><h3 id="三角函數是什麼？"><a href="#三角函數是什麼？" class="headerlink" title="三角函數是什麼？"></a>三角函數是什麼？</h3><p>正如同上面我所描述的各個需求，三角函數其實就是 <strong>「轉換長度與角度」</strong>。<br>想一想，今天我們要朝著一個角度移動，我們不就是要將這個「角度」給轉換成x與y分別移動的「長度」嗎？算出到一個座標的「角度」，也是將x與y的「長度」換算而來。</p><p>因此，三角函數在遊戲開發中有著非常廣泛的用途，牽涉到一切物件的移動都需要依賴它。很幸運的，在Python中已經有開發好的函式庫，我只要呼叫並傳入數字就好，因此我們只需要專注在邏輯上面。</p><h2 id="讓我朝著60度前進吧！"><a href="#讓我朝著60度前進吧！" class="headerlink" title="讓我朝著60度前進吧！"></a>讓我朝著60度前進吧！</h2><p>該如何讓玩家朝向60度前進？由於在遊戲中我們都是使用直角座標，因此我們要將「角度」以及「移動距離」轉換成x和y分別增加的量。這時就要使用三角函數最廣為人知的兩位大大：<strong>sin</strong> and <strong>cos</strong> !!</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/d/dc/Trigonometry_triangle_sim.png" alt=""><br>上圖連結自<a href="https://zh.wikipedia.org/zh-tw/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">維基百科</a></p><p>先談談一個三角形的各部位名稱，首先請看 角A ，角A這個角很重要，在接下來的說明中，我們所提到的「角度」都會是指這個角的角度，而這個角度我們就稱為 theta ，由於電腦沒辦法打出來，接下來我會以 angle 代稱之。<br>而圖中的 邊a 則是所謂的<strong>對邊</strong>，我們y座標的值就是對邊的長度；而邊b則是<strong>鄰邊</strong>，我們x座標的值就是鄰邊的長度。最後邊h，就是<strong>斜邊</strong>，我們前進的距離就是斜邊的長度。<br>那在這個例子中，我們就是要將 <em>a的角度 與 斜邊的長度</em> 替換成 <em>鄰邊與對邊的長度</em> 。</p><p>那接下來介紹我們的幫手大大，首先是 <strong>sin</strong> 大大，sin大大會負責將我們的角度angle轉換成 斜邊為1時 對邊的長度，只要再將此數值乘上我們的斜邊長，就可以求出對邊長，也就是y座標的值了。<br>那 <strong>cos</strong> 大大其實做的也是差不多的工作，只是它負責的是鄰邊，也就是x。所以我們只要將cos所求出的值乘上斜邊長，就可以得到x的長度了。</p><p>那該如何請這兩位大大工作呢？由於sin與cos兩位大大都是函數，我們只要將angle放入「括號」中，送給它們處理，它們計算完，就會告訴我們答案了，是不是很簡單呢？<br>但是如果你就這樣傻傻的直接把60傳給它，它可是會森77的喔！因為sin與cos以及全部的三角函數，使用的都不是我們平常習慣的，360一圈的「度」，而是「弧度」。</p><h3 id="弧度"><a href="#弧度" class="headerlink" title="弧度"></a>弧度</h3><p>弧度跟度一樣，是一種角度單位，度是360為一個單位，而弧度則是2倍圓周率為一個圓。<br>聽起來…好像是有點討厭的東西，算個角度也要扯到圓周率？真是夠了。但其實弧度的定義是十分優雅而簡潔的：</p><blockquote><p>單位弧度定義為圓弧長度等於半徑時的圓心角<br>—維基百科</p></blockquote><p>哇…我到底看了什麼…簡單來說，就是當一個扇形，它的弧長跟半徑相等時，它的圓心角就稱為「一弧度」，而一弧度則約為57.2957795度…看了很討厭?沒關係我們是工程師，這種工作就交給電腦去算就好了。<br>一個完整的圓它的弧度就會是 2pi，我們要將60度換算成弧度，就是將 (60 / 360) * 2pi = <strong>60 * pi / 180</strong> 。<br>那我們就來寫一個換算的函數，來將「度」換成「弧度」。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定義 函數 deg_to_rad 將「度(degree)」換為「弧度(rad)」</span></span><br><span class="line"><span class="string">輸入：度</span></span><br><span class="line"><span class="string">輸出：弧度</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> math    <span class="comment">#引用了Python的 數學庫</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deg_to_rad</span> <span class="params">(deg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> deg * math.pi / <span class="number">180</span></span><br><span class="line"><span class="comment"># 其中的 math.pi 是一個定義在Python math 函式庫的常數，我們透過呼叫它來取得較精準的 pi 值。</span></span><br><span class="line"><span class="comment"># 實作者：林宏信</span></span><br></pre></td></tr></table></figure></p><p>完成了弧度的處理，我們回到前面來計算三角函數。<br>大致的流程如下：將角度(angle)換為弧度(rad_angle)，再來將值分別傳入sin 與 cos 之中，將回傳值乘上移動距離(distance)，即可算出x, y分別須移動的量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定義 move函數 用來計算朝angle角度移動distance距離須移動之x, y座標</span></span><br><span class="line"><span class="string">輸入：角度angle, 距離distance</span></span><br><span class="line"><span class="string">輸出: (x, y) 元組，可用 x, y = move(angle, distance)來接收回傳值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span> <span class="params">(angle, distance)</span>:</span></span><br><span class="line">        rad_angle = deg_to_rad(angle)</span><br><span class="line">        self.x += math.cos(rad_angle) * distance</span><br><span class="line">        self.y += math.sin(rad_angle) * distance</span><br><span class="line"><span class="comment"># 實做者：林宏信 2018-7-26</span></span><br></pre></td></tr></table></figure><hr><h2 id="叫那隻殭屍…給我滾開！！"><a href="#叫那隻殭屍…給我滾開！！" class="headerlink" title="叫那隻殭屍…給我滾開！！"></a>叫那隻殭屍…給我滾開！！</h2><p>在我的遊戲中，有一種怪物 —殭屍，它會不停朝著玩家移動，玩家碰到就會被攻擊。但問題來了，我們只會朝著一個「角度」前進，並不會朝著一組「座標」前進啊！</p><p>要朝著一組座標前進其實有兩種解法，一是先算出朝向目標的角度，再等速前進；二是算出x與y分別平均須移動多少。<br>在這個單元我會先介紹第二個方法，找出角度的部份我會放在下個單元介紹。</p><h3 id="平均的-x-與-y"><a href="#平均的-x-與-y" class="headerlink" title="平均的 x 與 y"></a>平均的 x 與 y</h3><p>假設我們要從 (0, 0) 移動到 (3, 4) ，那我們就是將x座標增加3、y座標增加4。你可能會覺得：嗯…這還用說嗎？但是！假如我們今天要<strong>慢動作</strong>呢？<br>假如今天我不要一瞬間就從 (0, 0) 移動到 (3, 4)，而是分成十次進行呢？</p><p>簡單嘛！把 3 / 10、 4 / 10，一次移動 (0.3, 0.4) 不就好了？</p><p>是的，剛才這一串很像是廢話的描述，其實就是解題的關鍵！</p><p>怎麼說？從我們剛才的推論，我們得知，要將x平均移動，只要把總共<strong>需要移動的x長度</strong>，在本範例中就是3，除上<strong>分解的次數</strong>，在本範例中就是10。<br>不過，有時候我們並不知道要分解成幾次啊。如果我想要等速運動，我只會知道我的速度會是多少，但不會知道我總共要分解幾次，這該怎麼辦？</p><p>我們搬出距離與速度公式: 距離 = 速度 * 時間。所以時間就會等於 <strong>距離 / 速度</strong>。速度我們已經設定好了，那距離就是用畢氏定理，以此範例來說就是5，我們接下來用 distance 作為代號。</p><p>因此，計算x的完整算式就是：x / (distance / speed)，我們化簡一下，就會變成 x / distance <em> speed。那y就會是 y / distance </em> speed。</p><p>這一段…怎麼看起來有點眼熟？x就是鄰邊，distance就是斜邊，鄰邊除上斜邊…天啊！我們正在算三角函數！cos的定義就是鄰邊除上斜邊，而這正是我們現在正在做的！<br>所以其實我們並不一定要使用三角函數才能達成，有的時候，我們甚至可以透過實際的數字來「自己算出三角函數」。</p><p>那以下實做將定義在殭屍類別 Zombie 之中的物件方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定義 Zombie 與 Zombie.near 方法，near輸入target目標與移動速度</span></span><br><span class="line"><span class="string">輸入：target :帶有 x, y兩個屬性</span></span><br><span class="line"><span class="string">     speed :移動的速度</span></span><br><span class="line"><span class="string">輸出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zombie</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">near</span> <span class="params">(self, target, speed)</span>:</span></span><br><span class="line">        x, y = target.x - self.x, target.y - self.y</span><br><span class="line">        d = (x ** <span class="number">2</span> + y ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line">        self.x += x / d * speed</span><br><span class="line">        self.y += y / d * speed</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Move-Your-Body-—三角函數&quot;&gt;&lt;a href=&quot;#Move-Your-Body-—三角函數&quot; class=&quot;headerlink&quot; title=&quot;Move Your Body!! —三角函數&quot;&gt;&lt;/a&gt;Move Your Body!! —三角函數&lt;/
      
    
    </summary>
    
      <category term="FireWheel" scheme="https://www.wancat.cc/categories/FireWheel/"/>
    
    
  </entry>
  
  <entry>
    <title>矩形碰撞檢測 FireWheel火輪手槍(二)</title>
    <link href="https://www.wancat.cc/2018/08/02/FireWheel2/"/>
    <id>https://www.wancat.cc/2018/08/02/FireWheel2/</id>
    <published>2018-08-01T21:45:28.000Z</published>
    <updated>2018-08-01T22:10:03.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩形對矩形"><a href="#矩形對矩形" class="headerlink" title="矩形對矩形"></a>矩形對矩形</h2><img src="/2018/08/02/FireWheel2/rect_to_rect.svg.png" class="slug"><p>那今天如果是矩形之間的碰撞呢？雖然在我的遊戲中並沒有運用到矩形對矩形的碰撞，但是這算是碰撞檢測的基礎之一，因此我還是一併說明。</p><p><em>#註：此處說明之矩形皆為<strong>不旋轉</strong>的矩形</em></p><p>矩形對矩形的碰撞檢測需要用到「座標」的概念，總的來說，就是判斷兩個矩形的x範圍與y範圍有沒有<strong>重疊</strong>。只要x範圍與y範圍同時重疊了就代表這兩個矩形碰到了。<br>同樣的，我們先來列出已知資訊：</p><ul><li>座標(x, y)</li><li>長寬(w, h)</li></ul><h3 id="註：矩形的表示方式-XYWH"><a href="#註：矩形的表示方式-XYWH" class="headerlink" title="註：矩形的表示方式 XYWH"></a>註：矩形的表示方式 XYWH</h3><img src="/2018/08/02/FireWheel2/rect_to_rect2.svg.png" class="slug"><p>在電腦中，表示一個矩形的方法跟數學上有些許不同。首先，在電腦的座標系中，Y是向下增加的，這樣的座標系稱為「繪圖座標系」。<br>在繪圖座標系之中，原點在螢幕的左上角，因此x向右增加，y向下增加。</p><hr><p>先退一步來講，在數線中，該如何判斷一條線與另一條線重疊？<br>我們可以用邊界的角度來思考，今天有兩條線段 AB線段, CD線段 在同一直線上，會有兩種情形，CD 在 AB 的左邊或者右邊。假如 CD 在 AB 右邊時，只要 C 比 B 還要左邊，就代表重疊了；假如 CD 在 AB 左邊，只要 D 比 A  還右，就代表重疊了。</p><p>發現了嗎？只要我的左邊比你的右邊還左 and, 我的右邊比你的左邊還右，就代表我們站在前後了。<br><img src="/2018/08/02/FireWheel2/rect_to_rect3.svg.png" class="slug"></p><p>那今天我們把左邊右邊換一個說法，在繪圖座標系中一個矩形的座標位置會是左上角，那這樣左邊就是x，右邊是x + w；上面是y，下面是y + h。<br>你沒聽錯，<strong>y愈上面愈小，y愈下面愈大</strong>，在電腦的<strong>繪圖座標系</strong>中確實如此。</p><p>以下用 r1, r2 來代表矩形1、矩形2。<br>左邊在數線上通常是變小，因此就是小於。因此剛才的陳述就可以換成這樣：<br><strong>r1.x &lt; r2.x + r2.w</strong> # r1的左邊比r2的右邊還左（考慮r1在右時）<br><strong>r1.x + r1.w &gt; r2.x</strong> # r1的右邊比r2的左邊還右（考慮r1在左時）</p><p>以上判斷可以讓我們知道r1與r2的x範圍是否有重疊，注意，這邊並不是判斷r1與r2的邊有沒有相交喔！</p><p>那只判斷x範圍還不夠，我們還需要判斷y範圍有沒有重疊。y的判斷也一樣，只要照一樣的方式寫，把x換成y，w換成h就可以了。<br>由於y點在上方，所以愈上數字會愈小，只是表達的方式不同，但實際計算是沒有差別的。<br><strong>r1.y &lt; r2.y + r2.h</strong> # r1的上邊比r2的下邊還上（考慮r1在下時）<br><strong>r1.y + r1.h &gt; r2.y</strong> # r1的下邊比r2的上邊還下（考慮r1在上時）</p><p>而這所有條件必須要全部符合才代表兩個矩形相撞，因此我們將每個條件用and連起來，就會只有在全部符合的時候才回傳true。<br>以下為Python實做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">判斷矩形是否相交函數</span></span><br><span class="line"><span class="string">輸入：r1, r2兩個矩形物件</span></span><br><span class="line"><span class="string">r1與r2分別帶有 x, y, w, h四個屬性</span></span><br><span class="line"><span class="string">輸出：碰到(true), 沒碰到(false)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rect_to_rect</span> <span class="params">(r1, r2)</span> :</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        r1.x &lt; r2.x + r2.w <span class="keyword">and</span></span><br><span class="line">        r2.x &lt; r1.x + r1.w <span class="keyword">and</span></span><br><span class="line">        r1.y &lt; r2.y + r2.h <span class="keyword">and</span></span><br><span class="line">        r2.y &lt; r1.y + r1.h</span><br><span class="line">    )</span><br><span class="line"><span class="comment">#在函數裡為了排版整齊，我將第2及第4行的大小於順序調換，對程式執行是沒有差別的</span></span><br><span class="line"><span class="comment">#實作者：林宏信 2018 7/21</span></span><br></pre></td></tr></table></figure><hr><h2 id="…那圓形對矩形呢？"><a href="#…那圓形對矩形呢？" class="headerlink" title="…那圓形對矩形呢？"></a>…那圓形對矩形呢？</h2><img src="/2018/08/02/FireWheel2/circle_to_rect.svg.png" class="slug"><p>在我的遊戲中有「牆壁」，是玩家與怪物都無法穿過的障礙物。玩家與怪物是圓形，而牆壁卻是矩形。完蛋了，現在不能用兩物件的距離，因為牆壁不是圓的；也不能用座標系重疊，因為圓形不是方的。<br>沒關係，我們先列出已知的資訊：</p><table><thead><tr><th>項目</th><th>屬性</th><th>附註</th></tr></thead><tbody><tr><td>圓形</td><td>x, y, r</td><td>x, y為圓心座標</td></tr><tr><td>矩形</td><td>x, y, w, h</td><td>x, y為矩形左上角座標</td></tr></tbody></table><p>好，這次是真正的難題了，在場有同學能為我們指引方向嗎？ （等一下）</p><h3 id="找尋規律"><a href="#找尋規律" class="headerlink" title="找尋規律"></a>找尋規律</h3><p>我們先來亂猜看看，今天如果把一顆球從矩形右邊靠近，我們只要注意球的圓心到矩形右邊的距離，是否小於半徑就可以了；那如果從上面靠近呢？嗯…那應該就要跟上邊比才對；那如果從左邊來就跟左邊比、下面來就跟下邊比，好像沒有很難吼？</p><h3 id="發現例外"><a href="#發現例外" class="headerlink" title="發現例外"></a>發現例外</h3><p>那如果從<strong>左上方</strong>來呢？該跟誰比勒？<br>今天這顆球假如在矩形的右上方，圓心跟矩形左側及上側的距離已經小於半徑，也就是我們原先以為應該要碰到的情況，但實際上並沒有碰到。這又該怎麼辦？</p><img src="/2018/08/02/FireWheel2/circle_to_rect3.svg.png" class="slug"><p>看來計算圓心到邊的距離並不完全正確，<br>如果我們要計算圓形是否有碰到矩形，那是否能利用圓形到矩形的最短距離呢？!<br>只要判斷圓心到矩形的最短距離是否有小於半徑，應該就可以了吧！<br>沒錯！這就是圓形對矩形的核心概念，透過判斷最短距離是否小於半徑，來檢測圓是否有碰到矩形。</p><p>因此我們要來找出一個矩形最靠近圓心的那個<strong>點</strong>在哪裡，透過這個點和圓心的距離，來判斷圓是否有碰觸到矩形。</p><h3 id="計算最靠近的點"><a href="#計算最靠近的點" class="headerlink" title="計算最靠近的點"></a>計算最靠近的點</h3><img src="/2018/08/02/FireWheel2/circle_to_rect2.svg.png" class="slug"><p>首先，假如矩形不存在，最靠近圓心的點在哪裡？<strong>就在圓心</strong>，我知道這樣講是廢話，但只要我們把圓心的x, y給限制在矩形的範圍中，讓它盡可能的接近圓心，就可以找到最近點了。</p><p>所謂 <strong>「限制」</strong> 的意思是說，假如這個點比矩形的<strong>右邊還右</strong>，那就將它<strong>設定為矩形的右邊</strong>；如果比矩形的<strong>左邊還左</strong>，就將它<strong>設定為矩形的左邊</strong>；假如它沒有超過矩形的座標範圍，那就保持它原先的座標。上下邊以此類推。</p><p>那我們將上述講的「限制範圍」這件事寫成一個函數，讓我們後面可以重複呼叫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定義 set_range 函數，將數值 number 設定在 minimal 到 maximum之間的範圍。</span></span><br><span class="line"><span class="string">輸入：最小值、最大值、欲計算數字</span></span><br><span class="line"><span class="string">輸出：計算後結果，介於minimal ~ maximum 之間</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_range</span> <span class="params">(minimal, maximum, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number &gt; maximum:</span><br><span class="line">        <span class="keyword">return</span> maximum</span><br><span class="line">    <span class="keyword">elif</span> number &lt; minimal:</span><br><span class="line">        <span class="keyword">return</span> minimal</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment"># 實做：林宏信 2018-7-25</span></span><br></pre></td></tr></table></figure><p>那我們接下來只要將數字分別帶入函數中即可。<br>矩形的左邊即x, 右邊為x + w<br>矩形的上面是y, 下面是y + h<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定義 圓形矩形碰撞檢測函數</span></span><br><span class="line"><span class="string">輸入: c: 圓形物件，帶有 x, y, r屬性</span></span><br><span class="line"><span class="string">     r: 矩形物件, 帶有 x, y, w, h屬性</span></span><br><span class="line"><span class="string">輸出：碰到: True / 沒碰到: False</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_to_rect</span> <span class="params">(c, r)</span>:</span></span><br><span class="line">    x = set_range(r.x, r.x + r.w, c.x) <span class="comment"># 呼叫上方定義的限制範圍函數</span></span><br><span class="line">    y = set_range(r.y, r.y + r.h, c.y)</span><br><span class="line">    d = ((c.x - x) ** <span class="number">2</span> + (c.y - y) ** <span class="number">2</span>) ** <span class="number">0.5</span> <span class="comment"># 跟前面一樣利用畢氏定理求距離的算式</span></span><br><span class="line">    <span class="keyword">return</span> d &lt; c.r <span class="comment">#回傳「最短距離是否小於圓的半徑」的比較結果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#實做：林宏信 2018-7-25</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;矩形對矩形&quot;&gt;&lt;a href=&quot;#矩形對矩形&quot; class=&quot;headerlink&quot; title=&quot;矩形對矩形&quot;&gt;&lt;/a&gt;矩形對矩形&lt;/h2&gt;&lt;img src=&quot;/2018/08/02/FireWheel2/rect_to_rect.svg.png&quot; class=
      
    
    </summary>
    
      <category term="FireWheel" scheme="https://www.wancat.cc/categories/FireWheel/"/>
    
    
  </entry>
  
  <entry>
    <title>圓形碰撞檢測 FireWheel火輪手槍(一)</title>
    <link href="https://www.wancat.cc/2018/08/01/FireWheel1/"/>
    <id>https://www.wancat.cc/2018/08/01/FireWheel1/</id>
    <published>2018-08-01T12:06:07.000Z</published>
    <updated>2018-08-01T12:57:09.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遊戲的根本—碰撞檢測"><a href="#遊戲的根本—碰撞檢測" class="headerlink" title="遊戲的根本—碰撞檢測"></a>遊戲的根本—碰撞檢測</h2><h3 id="碰撞檢測為何重要？"><a href="#碰撞檢測為何重要？" class="headerlink" title="碰撞檢測為何重要？"></a>碰撞檢測為何重要？</h3><img src="/2018/08/01/FireWheel1/mario.svg" class="slug"><p>一個好的遊戲中，有什麼是不可或缺的條件呢？除非你是開發桌遊或卡牌遊戲，否則你一定會需要 <strong>「碰撞檢測」</strong> 。<br>碰撞檢測為何重要？想一想，今天你玩Minecraft，如果你碰不到東西，整個人像幽靈一樣開旁觀者飄來飄去，會好玩嗎？嘿嘿，其實挺好玩的，亂七八糟！如果Minecraft不會碰到東西，絕對不會有人想玩！<br>那你隨便想以前的2D遊戲，例如超級馬力歐，馬力歐總要踩在地面吧？馬力歐也必須要碰到怪物會死掉，還得要用腳可以踩死怪物。那達成這些需要什麼？就是碰撞檢測，我們要能夠偵測「兩個物件相撞」這件事，而這個動作就稱為「碰撞檢測」。  </p><p>碰撞檢測在scratch的實踐是非常簡單的，你只要拉出「碰到XXX？」來偵測一個狀態，就可以處理碰撞檢測。</p><h4 id="完了…-Python沒有碰撞檢測"><a href="#完了…-Python沒有碰撞檢測" class="headerlink" title="完了… Python沒有碰撞檢測"></a>完了… Python沒有碰撞檢測</h4><p>可是問題來了，Python並沒有內建碰撞檢測。咦？！！你不是說用程式語言功能比較強大？怎麼連這個基礎的功能都沒有。<br>我們必須要釐清一件事，「碰撞檢測」這類事情是遊戲設計比較會遇到的，Python的主要使用是做資料運算，像是現在很夯的AI、深度學習等等。大部分會有碰撞檢測的工具是「遊戲框架」，框架這種東西就如字面上的意思，它已經幫你把整個專案架構給設計好了，你只要按照需求把剩餘的東西給填入就好。<br>至於Python上有的遊戲框架…實在不多，而且學習如何使用一個框架也是非常耗費心力的過程，於是最後我就決定自己寫碰撞檢測啦！</p><p>在接下來的介紹中，我會按照各個形狀之間的碰撞檢測來做說明，之所以用形狀區分，由於我是用簡單的幾何圖形，例如：圓形、矩形，來進行碰撞檢測。是的，碰撞檢測在每種圖形的「算法」都不一樣，因為我的遊戲就只有圓形和矩形兩種形狀，因此僅實做圓形矩形之間的碰撞檢測。</p><hr><h2 id="當殭屍碰到了你-—圓形對圓形"><a href="#當殭屍碰到了你-—圓形對圓形" class="headerlink" title="當殭屍碰到了你 —圓形對圓形"></a>當殭屍碰到了你 —圓形對圓形</h2><img src="/2018/08/01/FireWheel1/circle_to_circle.svg.png" class="slug"><p><strong>要如何去偵測一個圓形是否碰到了另一個圓形呢？</strong><br>在我的遊戲中，例如怪物碰到了玩家，子彈射中了怪物，玩家被子彈射中等等，都是圓形與圓形的碰撞檢測。如果我們無法檢測這些，嗯…那這個遊戲大概會很無聊，因此我們要來實做圓形對圓形的碰撞檢測。</p><p>首先，我們列出我們所知道的<strong>資訊</strong>：</p><ul><li>x, y座標</li><li>半徑</li></ul><p>就這樣？是的，就只要這樣。<br>我們利用圓的性質，由於邊長上的任何一點到圓心都等長，不管從那個角度相撞，撞擊點到圓心的距離都會是圓的半徑。<br>所以如果一個點距離圓心小於半徑，就代表跟它重疊了。<br>那由於有兩個圓，所以只要「兩個圓心的距離」小於「兩個圓的半徑之合」，就代表兩個圓重疊，也就是「碰到」了。</p><p>至於如何取得兩點之間的距離，就是使用「畢氏定理」囉！在場的一年級應該還沒上到，礙於時間有限，我就只說重點。畢氏定理可以讓我們取得一個直角三角形的斜邊長，那我們兩個相異點之間的距離，其實就是以這兩點為頂點，畫出的直角三角形的斜邊。<br>畢氏定理數學公式：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7ef0a5a4b8ab98870ae5d6d7c7b4dfe3fb6612e2" alt=""><br>由此可得出：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2fef66265112bc5378959992887ca76314b1681e" alt=""></p><img src="/2018/08/01/FireWheel1/circle_to_circle2.svg.png" class="slug"><p>以下為Python的實做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">程式碼：計算c1與c2是否有相撞的函數</span></span><br><span class="line"><span class="string">輸入值：兩個「圓形物件」，分別帶有x座標(x)，y座標(y)，半徑(r)，三種屬性</span></span><br><span class="line"><span class="string">回傳值：true(代表有碰到) or false(代表沒碰到)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_to_circle</span> <span class="params">(c1, c2)</span> :</span>     <span class="comment">#c1 c2分別為圓1,圓2</span></span><br><span class="line">    <span class="comment">#d為兩點距離</span></span><br><span class="line">    d = ((c1.x - c2.x) ** <span class="number">2</span> + (c1.y - c2.y) ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">return</span> d &lt; (c1.r + c2.r)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c1.x 代表存取c1這個圓的x座標，以此類推</span></span><br><span class="line"><span class="comment">#Python的次方使用「**」來計算，開根號即為0.5次方</span></span><br><span class="line"><span class="comment">#程式語言中()與[]的意義不同，用於表示計算優先順序的一律為小括號</span></span><br><span class="line"><span class="comment">#撰寫者：林宏信 2018 7/21</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>圓形對圓形的碰撞檢測是碰撞檢測中的基礎，很實用也非常好理解。那接下來會繼續介紹矩形對矩形的碰撞檢測。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;遊戲的根本—碰撞檢測&quot;&gt;&lt;a href=&quot;#遊戲的根本—碰撞檢測&quot; class=&quot;headerlink&quot; title=&quot;遊戲的根本—碰撞檢測&quot;&gt;&lt;/a&gt;遊戲的根本—碰撞檢測&lt;/h2&gt;&lt;h3 id=&quot;碰撞檢測為何重要？&quot;&gt;&lt;a href=&quot;#碰撞檢測為何重要？&quot; c
      
    
    </summary>
    
      <category term="FireWheel" scheme="https://www.wancat.cc/categories/FireWheel/"/>
    
    
  </entry>
  
  <entry>
    <title>序 FireWheel火輪手槍(零)</title>
    <link href="https://www.wancat.cc/2018/08/01/FireWheel0/"/>
    <id>https://www.wancat.cc/2018/08/01/FireWheel0/</id>
    <published>2018-07-31T22:29:36.000Z</published>
    <updated>2018-08-01T22:05:58.606Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>運用 Python 程式語言自行設計一款單人遊戲 —<strong>火輪手槍</strong>，介紹 Python 程式語言與 Scratch 的不同，並說明如何利用<strong>幾何</strong>、<strong>三角函數</strong>等數學原理解決遊戲中的實際問題，再以程式語言實踐。<br>本系列之目標讀者為無程式基礎的人。<br><a href="https://github.com/lancatlin/FireWheel" target="_blank" rel="noopener">遊戲專案連結</a></p></blockquote><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><ul><li><a href="/2018/08/01/FireWheel0/">序</a></li></ul><p>碰撞檢測:</p><ul><li><a href="/2018/08/01/FireWheel1/">圓形對圓形</a></li><li><a href="/2018/08/02/FireWheel2/">矩形對矩形</a></li><li><a href="/2018/08/02/FireWheel2/#…那圓形對矩形呢？">圓形對矩形</a></li></ul><p>三角函數:</p><ul><li>讓我朝向60度移動吧！</li><li>叫那隻殭屍…給我滾開！！</li><li>不～～為什麼它的槍一直瞄準我啦！</li><li>把手槍變成三角形</li></ul><h2 id="FireWheel火輪手槍"><a href="#FireWheel火輪手槍" class="headerlink" title="FireWheel火輪手槍"></a>FireWheel火輪手槍</h2><p>FireWheel火輪手槍是我在寒假時製作的一個遊戲專案，當時是將它作為一個休閒來做。在寒假的時候我們在進行科展，當一天研究結束後，我就拿這個專案出來做，一做就又是好幾個小時。<br>這個遊戲對我的特別意義在於，<strong>這不是我第一次設計它</strong>，其實在我國一，還在使用Scratch時，我就曾經製作過。</p><h3 id="遊戲說明"><a href="#遊戲說明" class="headerlink" title="遊戲說明"></a>遊戲說明</h3><p>火輪手槍是一個戰鬥遊戲，玩家在一個迷宮中，四面八方會出現怪物來攻擊你，你只能靠著身邊的一把手槍來生存下去。<br>這個遊戲最特別的就在於我獨創的「火輪」，這把火輪手槍會繞在你身邊，當你按下發射鍵時會停下，開始左右搖擺，鬆開後就會發射出子彈。<br>新手遇到這樣的操作多半是很不習慣，因為這很難瞄準，必須花很多心思在看那把槍的旋轉；但是當你操作順手之後，你就會愛上它，因為這很有挑戰性，相較於普通的滑鼠瞄準或者是朝向正前方，火輪更能突顯出玩家的技巧，因此更有成就感。</p><h4 id="操作說明："><a href="#操作說明：" class="headerlink" title="操作說明："></a>操作說明：</h4><ul><li>使用WSAD移動</li><li>使用空白鍵發射</li><li>使用JKL選取道具 （道具功能僅Beta版）</li></ul><h3 id="成果預覽"><a href="#成果預覽" class="headerlink" title="成果預覽"></a>成果預覽</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/l0J4UVALaQ4" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><hr><h3 id="淺談遊戲設計"><a href="#淺談遊戲設計" class="headerlink" title="淺談遊戲設計"></a>淺談遊戲設計</h3><p>這個遊戲是使用Python製作，Python是一門優秀的程式語言，很好學、語法簡單，我在去年暑假時接觸它，花了許多時間學習，到了今年寒假時，已經可以熟練的用它來開發專案。當時寒假無聊，沒事時就做火輪手槍當娛樂。<br>那在後續的文章中，我會逐步介紹<strong>碰撞檢測</strong>、<strong>三角函數</strong>這兩個主題</p><h4 id="從scratch-到-Python"><a href="#從scratch-到-Python" class="headerlink" title="從scratch 到 Python"></a>從scratch 到 Python</h4><p>我的程式生涯是Scratch起家的，或許有人不承認Scratch是一門程式語言，但對我而言，是啟發我電腦研究生涯的重要推手。<br>在前面提到過，我曾經用Scratch開發過火輪手槍，但後期因為效能低落與程式架構維護不彰而停止開發。</p><h4 id="Scratch-的優缺點"><a href="#Scratch-的優缺點" class="headerlink" title="Scratch 的優缺點"></a>Scratch 的優缺點</h4><p><strong>簡單</strong>。使用Scratch開發真的是簡單到不行，老實說在我用Scratch開發的時期，我根本很少去查資料，為什麼？  </p><blockquote><p>所有資料都在裡面了，還要查什麼？</p></blockquote><p>中文界面的Scratch編輯器，讓小學的我也能輕易理解，再加上一點的嘗試，很快就能完成一點皮毛。<br>以下列舉一些Scratch的優缺點</p><h5 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h5><ul><li>簡單好用的碰撞檢測</li><li>將常用的幾何數學（如三角函數、畢氏定理）處理好</li><li>可一邊修改程式一邊執行</li><li><strong>容易學</strong></li></ul><h5 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h5><ul><li>糟糕的自訂函數功能（可輸入參數，但沒辦法得到回傳值）</li><li>分身一建立就回不來了（無法存取分身）</li><li>沒有物件導向</li><li>效能低落（當你的分身數到幾百個時，你就知道）</li><li><strong>無法掌控的異步處理</strong></li></ul><p>雖然對我而言，Scratch非常的不便，但是它的設計初衷本來就是為了小朋友而設計，我所需要的那些功能已經不是它應該提供的了。因此在一年級的下學期，我就非常的積極想要學習更專業的程式語言，最後便選中了簡單易學的Python。</p><p>那今天，我會將開發火輪手槍的過程中遇到的兩個問題挑出來講，分別是 碰撞檢測，及 三角函數。</p><h3 id="Python-不「歹算」"><a href="#Python-不「歹算」" class="headerlink" title="Python 不「歹算」"></a>Python 不「歹算」</h3><p>Python是我第一門真正學會的程式語言。對我而言，Python是非常平易近人的，在學習Python之前，我其實想要學習的是 Java ，Java應該算是平常人比較常聽到的東西，因為打遊戲常常要裝。（誤）<br>當時曾經為了學Java買了一本書，很認真的讀，只是都沒有乖乖的做練習，只想要知道更多東西，後來沒學成，又繼續寫Scratch一個學期。<br>後來到了升二年級暑假前，剛好聽朋友提到Python，於是上網去試試看，一試不得了，整個開發環境、語法都非常的平易近人，花了兩天的時間就弄出了GUI來，（當然那時候根本只是照抄）。</p><p>所以在二年級，我幾乎寫的都是Python，我也強力推薦對程式有興趣的朋友以Python開始，Python <strong>真的 不 「歹算」。</strong></p><hr><h2 id="物件導向基礎"><a href="#物件導向基礎" class="headerlink" title="物件導向基礎"></a>物件導向基礎</h2><p>電腦程式設計有許多種專家在研究多年所產生「編程範式」，你的程式符合編程範式，可以讓你的專案用更好的方式開發、或者讓日後容易維護、以及程式碼更容易閱讀。<br>有名的編程範式有：函數式程式設計、物件導向程式設計等等。在當代，物件導向程式設計最受推崇，不少資訊課程一定會教到，出去工作參與他人專案也幾乎都會遇到。</p><p>物件導向程式設計的核心概念是：物件是程式的基本單位，將程式的執行過程視為一群物件的交流過程。</p><p>使用物件導向來開發專案的好處是易於維護，物件導向的特性可以將代碼重用，事後修改也較輕鬆。那在我這個專案也不例外。</p><p>接下來我會介紹物件導向中的「類與物件」，這只是物件導向的基礎，至於物件導向的詳細知識由於相當複雜，而且我也不敢保證自己完全理解，所以我就不在這次說明。</p><h3 id="Class-類-以及-Object-物件"><a href="#Class-類-以及-Object-物件" class="headerlink" title="Class (類) 以及 Object (物件)"></a>Class (類) 以及 Object (物件)</h3><p>在剛剛提到，物件導向中的程式是由一群物件建構起來的，那該如何創造一個「物件」呢？</p><p>答案是定義Class。Class，也就是類別，你可以將它視為物件的模板，在Class中你定義每個物件有著什麼<strong>屬性</strong>，會做什麼<strong>行為</strong>，然後你再建立此Class的實例，根據你給予的資料，就會產生不一樣的<strong>物件</strong>。</p><p>舉例我們要建立一群殭屍，那這些殭屍或許每一隻的顏色不一樣，座標不一樣，但是它們的行為模式是一致的，這些殭屍就是我們產生的「物件」，而定義我們殭屍物件該如何行動的則是殭屍「類別」。</p><h4 id="屬性-與-行為"><a href="#屬性-與-行為" class="headerlink" title="屬性 與 行為"></a>屬性 與 行為</h4><p>屬性是一個物件所帶有的資料，以殭屍為例會有座標、顏色、移動速度、血量等屬性，這些屬性有些是數字，有些是字串，有些甚至是別的物件；行為則是一個物件的行為，多半是一個函數，例如殭屍會移動、會死掉。</p><p>屬性和行為的區分大多是明顯的，且在定義方式就有所不同。但是在某些語言例如Javascript，就直接將行為作為屬性。</p><p>一個殭屍物件可能包含的屬性有：x, y座標、顏色、移動速度、血量等等，那它可能包含的行為有：靠近玩家、…抱歉殭屍這個類別它的行為真的很少。</p><p>要存取物件的屬性或方法就是使用 <strong>.</strong> ，沒錯就是英文的句點，假如說你有一個Zombie的物件名叫my_zombie，你要讓它向玩家靠近，就使用 my_zombie.near()，如果你想存取它的座標，你就使用 my_zombie.x my_zombie.y</p><h3 id="參考自己-—self"><a href="#參考自己-—self" class="headerlink" title="參考自己 —self"></a>參考自己 —self</h3><p>當我們在定義類別時，需要取得自己的屬性或方法，這時候無須再傳一個參數到函數中，在Python中，只要用 <strong>self</strong> 就可以存取自己的屬性了。</p><p>假如今天這個函數是殭屍的物件方法，那self就會是存取殭屍的屬性；如果今天是玩家呼叫這個函數，那self就會存取玩家的屬性。有了self，我們就可以操作自己的屬性，而無須再多傳送自己進去。</p><p>而呼叫自己的函數，在函數的最前面需要加上self參數。例如：殭屍要讓自己靠近玩家，self.near()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zombie</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.color = (<span class="number">180</span>, <span class="number">65</span>, <span class="number">120</span>)</span><br><span class="line">        self.speed = <span class="number">5</span></span><br><span class="line">        self.blood = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">near</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#靠近目標</span></span><br></pre></td></tr></table></figure><p>而透過此類別產生物件則是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">zombie = Zombie()</span><br><span class="line">zombie.near()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>在以下的介紹，有部份的參數是物件，例如碰撞檢測中的 circle, rect，或是會有一些程式實做在物件方法中，例如三角函數中的 near, move方法。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;運用 Python 程式語言自行設計一款單人遊戲 —&lt;strong&gt;火輪手槍&lt;/strong&gt;，介紹 Python 程式語言與 Scratch 的不同，並說明如何利用&lt;strong&gt;幾何&lt;/strong&gt;、&lt;strong&gt;三角函數&lt;/strong&gt;
      
    
    </summary>
    
      <category term="FireWheel" scheme="https://www.wancat.cc/categories/FireWheel/"/>
    
    
  </entry>
  
  <entry>
    <title>問題紀錄。使用 Docker 安裝 Gitlab</title>
    <link href="https://www.wancat.cc/2018/07/31/Gitlab-on-Docker/"/>
    <id>https://www.wancat.cc/2018/07/31/Gitlab-on-Docker/</id>
    <published>2018-07-30T17:11:11.000Z</published>
    <updated>2018-08-28T23:14:43.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="問題摘要："><a href="#問題摘要：" class="headerlink" title="問題摘要："></a>問題摘要：</h2><ul><li>Docker 無法使用 –volume 將資料夾掛載，顯示 read-only<ul><li>改成使用mount type=bind沒用</li><li>改成使用資料卷容器有用，但是無法執行</li></ul></li><li>將 /etc/gitlab/gitlab.rb 設定external_url後重啟容器，無法連上網頁。reconfigure也無效</li><li>Docker-compose 無法啟動，問題同第一點</li></ul><h2 id="系統環境"><a href="#系統環境" class="headerlink" title="系統環境"></a>系統環境</h2><ul><li>硬體（年齡超過七年）:<ul><li>主機板：Dell 0RY206 </li><li>CPU:  AMD Athlon(tm) 64 X2 Dual Core Processor 4400+</li><li>RAM: 2G</li></ul></li><li>軟體：<ul><li>作業系統：Ubuntu Server 18.04</li><li>Docker: 17.06.2-ce</li><li>Gitlab Image: gitlab/gitlab-ce:latest</li></ul></li><li>網路：<ul><li>浮動IP</li><li>使用No-ip DDNS服務取得 domain name</li><li>機器在內網中，路由器將此伺服器設定為外網IP以連上外網</li></ul></li></ul><h2 id="問題詳細描述"><a href="#問題詳細描述" class="headerlink" title="問題詳細描述"></a>問題詳細描述</h2><p>Docker 執行 gitlab 正常，但是當開啟專案後在clone連結會出現docker本身的hostname (一大串英文數字組成的亂碼)。並且不能使用ssh push(因為port沒有打開22)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab -p 8888:80 gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>刪掉後重新run一次。這次加入了hostname參數，雖然亂碼改成了正確hostname，但由於我的port是開在8888，因此還是不正確。這時候查到要用exec 進入去修改　/etc/gitlab/gitlab.rb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab /bin/bash</span><br><span class="line"># vim /etc/gitlab/gitlab.rb</span><br><span class="line">------以下為修改處---------</span><br><span class="line">external_url &apos;http://[我的host]:8888/&apos;</span><br><span class="line"></span><br><span class="line">itlab_rails[&apos;gitlab_ssh_host&apos;] = &apos;[我的host]:222&apos;</span><br></pre></td></tr></table></figure></p><p>設定完成後restart，重啟後久久還是看不到網頁，於是又去翻logs，結果看到輸出寫需要執行：gitlab-ctl reconfigure，但執行後出現以下錯誤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Running handlers:</span><br><span class="line">There was an error running gitlab-ctl reconfigure:</span><br><span class="line"></span><br><span class="line">bash[migrate gitlab-rails database] (gitlab::database_migrations line 49) had an error: Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received &apos;1&apos;</span><br><span class="line">---- Begin output of &quot;bash&quot;  &quot;/tmp/chef-script20180715-18-hk1m59&quot; ----</span><br><span class="line">STDOUT: rake aborted!</span><br><span class="line">StandardError: An error has occurred, this and all later migrations canceled:</span><br><span class="line"></span><br><span class="line">PG::DuplicateTable: ERROR:  relation &quot;labels&quot; already exists</span><br><span class="line">: CREATE TABLE &quot;labels&quot; (&quot;id&quot; serial primary key, &quot;title&quot; character varying, &quot;color&quot; character varying, &quot;project_id&quot; integer, &quot;created_at&quot; timestamp, &quot;updated_at&quot; timestamp) </span><br><span class="line">/opt/gitlab/embedded/service/gitlab-rails/db/migrate/20140729134820_create_labels.rb:6:in `change&apos;</span><br><span class="line">/opt/gitlab/embedded/service/gitlab-rails/lib/tasks/gitlab/db.rake:50:in `block (3 levels) in &lt;top (required)&gt;&apos;</span><br><span class="line">/opt/gitlab/embedded/bin/bundle:23:in `load&apos;</span><br><span class="line">/opt/gitlab/embedded/bin/bundle:23:in `&lt;main&gt;&apos;</span><br><span class="line"></span><br><span class="line">Caused by:</span><br><span class="line">ActiveRecord::StatementInvalid: PG::DuplicateTable: ERROR:  relation &quot;labels&quot; already exists</span><br><span class="line">: CREATE TABLE &quot;labels&quot; (&quot;id&quot; serial primary key, &quot;title&quot; character varying, &quot;color&quot; character varying, &quot;project_id&quot; integer, &quot;created_at&quot; timestamp, &quot;updated_at&quot; timestamp) </span><br><span class="line">/opt/gitlab/embedded/service/gitlab-rails/db/migrate/20140729134820_create_labels.rb:6:in `change&apos;</span><br><span class="line">/opt/gitlab/embedded/service/gitlab-rails/lib/tasks/gitlab/db.rake:50:in `block (3 levels) in &lt;top (required)&gt;&apos;</span><br><span class="line">/opt/gitlab/embedded/bin/bundle:23:in `load&apos;</span><br><span class="line">/opt/gitlab/embedded/bin/bundle:23:in `&lt;main&gt;&apos;</span><br><span class="line"></span><br><span class="line">Caused by:</span><br><span class="line">PG::DuplicateTable: ERROR:  relation &quot;labels&quot; already exists</span><br><span class="line">/opt/gitlab/embedded/service/gitlab-rails/db/migrate/20140729134820_create_labels.rb:6:in `change&apos;</span><br><span class="line">/opt/gitlab/embedded/service/gitlab-rails/lib/tasks/gitlab/db.rake:50:in `block (3 levels) in &lt;top (required)&gt;&apos;</span><br><span class="line">/opt/gitlab/embedded/bin/bundle:23:in `load&apos;</span><br><span class="line">/opt/gitlab/embedded/bin/bundle:23:in `&lt;main&gt;&apos;</span><br><span class="line">Tasks: TOP =&gt; db:migrate</span><br><span class="line">(See full trace by running task with --trace)</span><br><span class="line">== 20140729134820 CreateLabels: migrating =====================================</span><br><span class="line">-- create_table(:labels)</span><br><span class="line">STDERR: </span><br><span class="line">---- End output of &quot;bash&quot;  &quot;/tmp/chef-script20180715-18-hk1m59&quot; ----</span><br><span class="line">Ran &quot;bash&quot;  &quot;/tmp/chef-script20180715-18-hk1m59&quot; returned 1</span><br><span class="line"></span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client failed. 98 resources updated in 02 minutes 01 seconds</span><br></pre></td></tr></table></figure></p><p>我實在看不懂，也查不到原因，於是我就將此容器刪除了。</p><h3 id="無法使用資料卷"><a href="#無法使用資料卷" class="headerlink" title="無法使用資料卷"></a>無法使用資料卷</h3><p>我發現每次啟動容器資料都會重置，因此我按照<a href="https://docs.gitlab.com/omnibus/docker/#run-the-image" target="_blank" rel="noopener">官網</a>的指令去打，想要用資料卷來儲存資料。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname [我的host] \</span><br><span class="line">    --publish 443:443 --publish 8888:80 --publish 222:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/log/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>我更改的部份有hostname、80 port改到8888、22 port改到222。其他一致。<br>接著執行後剛閃出容器id，就爆出錯誤。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker: Error response from daemon: </span><br><span class="line">error while creating mount source path &apos;/srv/gitlab/logs&apos;: mkdir /srv/gitlab: </span><br><span class="line">read-only file system.</span><br></pre></td></tr></table></figure></p><p>我試著自行先將資料夾mkdir，以及將權限設定成777，都沒辦法解決。接下來我去查詢<a href="https://docs.docker.com/storage/volumes/#create-and-manage-volumes" target="_blank" rel="noopener">Docker官網</a>Volume的使用方式。<br>看到的資料顯示，要使用資料卷有–volume跟–mount 兩種參數。根據官網的說法，在17.06之後的Docker建議使用–mount。</p><blockquote><p>New users should try –mount syntax which is simpler than –volume syntax.</p></blockquote><p>由於前面使用–volume出問題，我這次就改成用mount試試看。我照官網文件下方的一個範例更改我的指令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 官網範例</span><br><span class="line"><span class="meta">$</span> docker run -d \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount source=myvol2,target=/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 我的指令</span><br><span class="line"><span class="meta">$</span> docker run --detach \</span><br><span class="line">        -it \</span><br><span class="line">        --hostname [我的host] \</span><br><span class="line">        --publish 443:443 --publish 8888:80 --publish 222:22 \</span><br><span class="line">        --name gitlab \</span><br><span class="line">        --restart always \</span><br><span class="line">        --mount source=config,target=/etc/gitlab \</span><br><span class="line">        --mount source=logs,target=/var/log/gitlab \</span><br><span class="line">        --mount source=data,target=/var/opt/gitlab \</span><br><span class="line">        gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p>我的指令大致與前一次相同，只是將-v之處改成了mount。在執行後才發現這個指令會建立資料卷在docker的目錄，而非原本我設想的/src中，但先不管這個問題，反正都能達到目標。<br>啟動之後，忘記發生什麼事了。將logs搬出來看，發現還是跳出了read-only這個問題。我使用直接找資料卷的路徑改設定檔。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># vim /var/snap/docker/common/var-lib-docker/volumes/config/_data/gitlab.rb</span><br><span class="line">------以下為修改處---------</span><br><span class="line">external_url &apos;http://[我的host]:8888/&apos;</span><br><span class="line"></span><br><span class="line">itlab_rails[&apos;gitlab_ssh_host&apos;] = &apos;[我的host]:222&apos;</span><br></pre></td></tr></table></figure></p><p>設定完成後restart，重啟後久久還是看不到網頁，於是又去翻logs，結果看到輸出寫需要執行：gitlab update-permissons。執行失敗（忘記原因），將容器刪除。<br>這時在網路上查到我真正想要用的bind方法，照著找到<a href="https://deepzz.com/post/the-docker-volumes-basic.html" target="_blank" rel="noopener">網頁</a>打：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 網站範例</span><br><span class="line">$ docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount type=bind,source=&quot;$(pwd)&quot;/target,target=/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 我的指令</span><br><span class="line"><span class="meta">#</span> docker run --detach \</span><br><span class="line">        -it \</span><br><span class="line">        --hostname [我的host] \</span><br><span class="line">        --publish 443:443 --publish 8888:80 --publish 222:22 \</span><br><span class="line">        --name gitlab \</span><br><span class="line">        --restart always \</span><br><span class="line"><span class="meta">#</span> 重點</span><br><span class="line">        --mount type=bind,source=/srv/gitlab/config,target=/etc/gitlab \</span><br><span class="line">        --mount type=bind,source=/srv/gitlab/logs,target=/var/log/gitlab \</span><br><span class="line">        --mount type=bind,source=/srv/gitlab/data,target=/var/opt/gitlab \</span><br><span class="line">        </span><br><span class="line">        gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p>修改之處在source的連結，我使用的是系統絕對路徑，以及target的位置。<br><strong>執行後輸出source路徑錯誤。</strong>，無法執行。<br><em>#我尚未嘗試使用”$(pwd)”做前綴</em></p><h3 id="docker-compose-結果同-v"><a href="#docker-compose-結果同-v" class="headerlink" title="docker-compose　結果同　-v"></a>docker-compose　結果同　-v</h3><p>這時我在<a href="https://docs.gitlab.com/omnibus/docker/#install-gitlab-using-docker-compose" target="_blank" rel="noopener">Gitlab官網範例</a>中找到可以使用docker-compose來建立，於是我下載官方範例，並進行些微修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Gitlab範例</span><br><span class="line">web:</span><br><span class="line">  image: &apos;gitlab/gitlab-ce:latest&apos;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &apos;gitlab.example.com&apos;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &apos;https://gitlab.example.com&apos;</span><br><span class="line">      # Add any other gitlab.rb configuration here, each on its own line</span><br><span class="line">  ports:</span><br><span class="line">    - &apos;80:80&apos;</span><br><span class="line">    - &apos;443:443&apos;</span><br><span class="line">    - &apos;22:22&apos;</span><br><span class="line">  volumes:</span><br><span class="line">    - &apos;/srv/gitlab/config:/etc/gitlab&apos;</span><br><span class="line">    - &apos;/srv/gitlab/logs:/var/log/gitlab&apos;</span><br><span class="line">    - &apos;/srv/gitlab/data:/var/opt/gitlab&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 我的修改檔</span><br><span class="line">web:</span><br><span class="line">  image: &apos;gitlab/gitlab-ce:latest&apos;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &apos;[我的host]&apos;  #將host 改成自己的</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">            external_url &apos;http://[我的host]:8888&apos;  #將port設定為8888</span><br><span class="line">            gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 222　</span><br><span class="line">            #將ssh port 設定為222</span><br><span class="line">  ports:</span><br><span class="line">    - &apos;8888:80&apos;　#修改port</span><br><span class="line">    - &apos;443:443&apos;</span><br><span class="line">    - &apos;222:22&apos;</span><br><span class="line">  volumes:</span><br><span class="line">    - &apos;/srv/gitlab/config:/etc/gitlab&apos;</span><br><span class="line">    - &apos;/srv/gitlab/logs:/var/log/gitlab&apos;</span><br><span class="line">    - &apos;/srv/gitlab/data:/var/opt/gitlab&apos;</span><br></pre></td></tr></table></figure><p>運行後跳出錯誤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Starting root_web_1 ... error</span><br><span class="line"></span><br><span class="line">ERROR: for root_web_1  Cannot start service web: b&quot;error while creating mount source path &apos;/srv/gitlab/logs&apos;: mkdir /srv/gitlab: read-only file system&quot;</span><br><span class="line"></span><br><span class="line">ERROR: for web  Cannot start service web: b&quot;error while creating mount source path &apos;/srv/gitlab/logs&apos;: mkdir /srv/gitlab: read-only file system&quot;</span><br><span class="line">ERROR: Encountered errors while bringing up the project.</span><br></pre></td></tr></table></figure></p><p>看起來跟最原先-v的結果是相似的，我也就不想試了。</p><h2 id="修改-etc-gitlab-gitlab-rb後無法重啟"><a href="#修改-etc-gitlab-gitlab-rb後無法重啟" class="headerlink" title="修改/etc/gitlab/gitlab.rb後無法重啟"></a>修改/etc/gitlab/gitlab.rb後無法重啟</h2><p>最終我放棄使用資料卷，打算單純先使用容器來儲存資料就好。<br>使用指令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker run -d --name gitlab -p 8888:80 -p 443:443 -p 222:22 --hostname [我的host] gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>這樣讓它跑大概五分鐘，就可以看到網頁了。但是建立repo後clone連結仍然沒有加上port（因為未設定），因此我再用exec進入容器去修改參數。<br>同樣只調整url和ssh url兩項設定，調整內容同前面所提過的。在調整完後，使用docker restart gitlab ，等待大約三分鐘仍然沒有反應，於是我進去檢查log，我不確定是否它有提示我reconfigure，總之我做了，這一次有成功執行完畢，但是執行完後仍然顯示不出網頁，重啟也一樣。<br>我觀察log，發現一直會有跳出GET訊息，還有某某json的訊息，抱歉我沒有將內容擷取下來。</p><hr><p>我的嘗試就到此為止了，之所以使用Docker安裝是由於過去曾經直接安裝，但是發生很多錯誤（一直維持在503），想說透過Docker應該可以避免掉不少環境影響。</p><p>謝謝你看到這邊，如果你知道如何解決，懇請你告訴我！如果我的描述還有什麼需要補充的地方也歡迎跟我說。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;問題摘要：&quot;&gt;&lt;a href=&quot;#問題摘要：&quot; class=&quot;headerlink&quot; title=&quot;問題摘要：&quot;&gt;&lt;/a&gt;問題摘要：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Docker 無法使用 –volume 將資料夾掛載，顯示 read-only&lt;ul&gt;
&lt;li&gt;改成使用
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.wancat.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>二十一天的連續早起</title>
    <link href="https://www.wancat.cc/2018/06/18/21earlyday/"/>
    <id>https://www.wancat.cc/2018/06/18/21earlyday/</id>
    <published>2018-06-18T00:42:03.000Z</published>
    <updated>2018-06-18T00:56:34.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我的21earlyday計畫終於在今天結束了。<br>這21天，我做了生活中最大的改變，而這21天，我很享受。<br>所以在這結束之後，我還是會持續下去。  </p></blockquote><h2 id="什麼是21earlyday？"><a href="#什麼是21earlyday？" class="headerlink" title="什麼是21earlyday？"></a>什麼是21earlyday？</h2><p>它是一個Hashtag，連續21天早起的計畫。這個早起不是一般那種7點起床就算早起，而是4點5點那種，異於常人的早起。<br>那為什麼是21天呢？因為（據說）21天是養成一個習慣的最短時間，所以當初創辦人就選定了這個時間。<br>之所以有這個活動（而且挺多人響應），是為了改變生活。在我過去的日子，我是很難7點爬起來的，因為我很愛睡，但又捨不得那麼早睡，加上假日都晚睡晚起，所以讓我平常天的起床簡直痛不欲生。<br>我其實並沒有很在乎這些，讓我真正下定決心的原因是，<strong>增加時間</strong>。<br><a href="https://womany.net/read/article/14517?ref=fb" target="_blank" rel="noopener">【TED 有意識週報】連續 21 天四點半起床：我零成本創造了更多時間</a></p><h2 id="在每天的早起中，無意間增加的時間"><a href="#在每天的早起中，無意間增加的時間" class="headerlink" title="在每天的早起中，無意間增加的時間"></a>在每天的早起中，無意間增加的時間</h2><p>我是很熱愛軟體開發的，但讓我很不滿的是時間不足，每天上九小時的義務教育，老實說到家只想休息，大概到了晚上8, 9 點才會有精神起來「開工」（而且還要寫完作業），但是大概用沒多久就得去睡覺了。<br>這實在很令人洩氣，我有許多想做的事，例如開發專案、寫文章，而且這些我都會做，唯一的問題就是時間不足，因此時間不足這個煩惱蟬聯了兩屆我的輔導手冊（每個學生都有一本，用來應付教育部的謎樣物品）。因此我常常注意一些時間管理方面的文章，希望能從我現有的生活中，再壓縮出一些時間。<br>但說實話，我通常只能夠往睡眠時間壓縮，結果我變得越來越晚睡，11:30已經變成日常，而且問題是，當我開始工作，我會<strong>不想睡</strong>，結果在床上躺了半個小時還是睡不著，最後還得拿本書來看逼自己入眠。<br>再不然，就是下課後已經精神疲累，沒有精力再去忙自己的事，畢竟我的這些工作很多都是很燒腦的，在一天的尾聲，有時候就算想做也提不起勁。  </p><h3 id="早起創造更多時間的四個原因"><a href="#早起創造更多時間的四個原因" class="headerlink" title="早起創造更多時間的四個原因"></a>早起創造更多時間的四個原因</h3><ol><li>睡一覺起來精神抖擻：累了就早點睡，早上起來有精神工作</li><li>避免滑手機浪費時間：有時晚上就是發懶，還沒到睡覺時就一直滑手機，無形中浪費許多時間</li><li>早起比早睡容易： 雖然你五點起來，但是相信我，你還是會十點睡的</li><li>避免賴床：其實…只要想你起床後可以用電腦，就會馬上起床了</li></ol><p>如果一天過完你很累的話，那第一點尤其適合你，先睡一覺再起來，早上十分安靜，而且你可以專心的做你熱愛的事。（早起打code最幸福）。<br>另一方面，早上是非常安靜的，很適合寫文章這一種要高度專注的活動，如果你想避免干擾，也可以試試。  </p><h2 id="二十一天的心路歷程"><a href="#二十一天的心路歷程" class="headerlink" title="二十一天的心路歷程"></a>二十一天的心路歷程</h2><p>第一天，我五點起床，還到臉書發了個動態。第一天五點起床，很安靜，天已經有點亮了，陽光搭配我的數學鬧鐘，不難起來。<br>那我起來後做什麼事呢？打Code去，我沒有先吃早餐，我直接就去用電腦。事實上我早餐的食慾通常要起床一個小時候才有，所以在以前我都是帶去學校吃，因為在家裡不是沒時間，是真的吃不下。五點起床之後，我先用一個半小時的電腦，然後走到廚房自己弄一頓早餐，熱騰騰的蛋餅，一方面早餐的選擇可以更多樣化，二方面可以在家裡悠閒的吃。<br>有時前一晚還沒寫完作業也可以趁這兩個小時寫。</p><h3 id="早起要做什麼？"><a href="#早起要做什麼？" class="headerlink" title="早起要做什麼？"></a>早起要做什麼？</h3><p>常常有人問我這麼早起要做什麼？做我平常會做的事啊！他們似乎認為早起是有一個「目的」，我是有目的沒錯，可是並非專為某件事而早起，而是一種生活習慣。我早起不做什麼，做我平常會做的事，可能是寫程式，可能是寫作業，也可能只是看Youtube配早餐。<br>那這樣跟你晚上做有差嗎？有差，真的有差，晚上一方面干擾多，不管是家人、朋友、還是你追蹤的Youtube都常常在這個時間發動態，如果在這個時間工作是很難專注的；相對的，早上幾乎沒有人起來，你可以安靜，不受干擾的動作，對我而言這差別很大。<br>另一方面就是上面所說，精神的問題。晚上精神差，就工作起來沒勁；如果有精神呢？恭喜你，等一下上床後就睡不著啦！事實上晚上工作真的很衰小，工作的很順就是不用睡，不順那根本沒做到工作，本質上就不適合在睡前或是晚上工作；但如果是早上爬起來，只要精神好就好，不用怕睡不著，反而待會兒上課時會更有精神。</p><h3 id="有時候，你會睡的更少"><a href="#有時候，你會睡的更少" class="headerlink" title="有時候，你會睡的更少"></a>有時候，你會睡的更少</h3><p>雖然原作者說你會因為早起而更早睡，可能是我的生理時鐘仍然被太陽影響，我到了九點並不會想睡，通常是十點入眠，因此我的睡眠時間大概會是7個小時之內。<br>另外有時是為了朋友，我和幾個同為學習程式的朋友在星期三、六都會上線聊天，但由於他們多半是大學，或著已經出社會了，所以我們的上線時間是晚上9點。原本我都很OK，但是自從開始這個計畫後，我多半十點就得下線了，減少了彼此交流的時間。  </p><p>那如果睡的很少怎麼辦？我假日仍然會補眠，只是並非用晚起來補眠，而是用早睡，假日我通常會準時九點前去睡，有一次假日跟朋友出去玩，回家太累，六點就睡著了，還沒吃晚餐，直接睡到隔天五點。  </p><p>我實話說，早起並不會讓你交更多朋友，對我而言，早起的很大意義是獨處，我的很多工作都是要獨處才適合的。或許你很難忍受孤獨，但早起的孤獨並不是「孤單寂寞覺得冷」，而是<strong>自由自在</strong>。</p><h3 id="重點不是早睡早起，重點是一致"><a href="#重點不是早睡早起，重點是一致" class="headerlink" title="重點不是早睡早起，重點是一致"></a>重點不是早睡早起，重點是一致</h3><p>其實原先的生活有很大的問題就是假日會整個將生活時間往後延，可能起來就已經10點了，並不是說一定要早睡早起，重點是要<strong>生活作息一致</strong>，事實上很多科學研究指出青少年本來就會比較晚睡，但是現今的社會制度是這樣我無法改變，週末晚睡當夜貓子固然很爽，也固然很安靜可以很專注，但是你不能持續啊！因為學校就是逼你7.30到校，這沒辦法改。<br>早起的好處是符合社會規則，你不會因為早起就被處罰，而且是可以一致、連貫的，即使是假日也能持續下去。當然現今的社會規則是很不合理的，但我們可以一邊改變，同時讓自己好過一點。  </p><h2 id="對某些人來說，早睡是奢侈的"><a href="#對某些人來說，早睡是奢侈的" class="headerlink" title="對某些人來說，早睡是奢侈的"></a>對某些人來說，早睡是奢侈的</h2><p>在我開始這個計畫，大概一週後，我有一位朋友也心動了，一起參加21earlyday。但由於她平常補習甚多，每天都晚上九點半才下課，所以要「早睡」都有些困難。但她還是盡所能的早睡早起，雖然有幾天可能不小心睡到6點。<br>在知道後我不免懷疑，那些補習班所開出的「補到十點」課程真的有用嗎？我認為人的專注時間是有限的，在專注時間用完後你多讀也無益，就像是藥吃太多一樣。每天把學生弄到十一點才能睡覺，真的能讓學習表現變好嗎？（設問中的疑問）<br><strong>我不知道</strong>，我很幸運，學業並不需要額外補習就可維持，事實上班上前幾名的同學也確實很多是有補習的，我也不反對補習，只是我很難接受為了學業把學生操到上課時間都沒精神。<br>事實上我的朋友也不知道，她不知道她的成績變好究竟是自己努力，還是補習造成的；是因為晚上上到9.30，還是其實8.30就足矣？  </p><blockquote><p>但我想她能確定的是，她不喜歡這樣的生活，因此她開始了21earlyday。  </p></blockquote><hr><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>很高興這篇文章在兩小時內迅速飆完了，也很慶幸沒有字數大爆炸。<br>真的由衷的喜歡現在的生活方式，也希望給看到這篇文章的你，<strong>一個改變的契機</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我的21earlyday計畫終於在今天結束了。&lt;br&gt;這21天，我做了生活中最大的改變，而這21天，我很享受。&lt;br&gt;所以在這結束之後，我還是會持續下去。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什麼是21earlyday？&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="life" scheme="https://www.wancat.cc/tags/life/"/>
    
  </entry>
  
</feed>
